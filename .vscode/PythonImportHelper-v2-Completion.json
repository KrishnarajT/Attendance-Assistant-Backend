[
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "mongodb_uri",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "add_face_encoding",
        "importPath": "routers.client_uploads",
        "description": "routers.client_uploads",
        "isExtraImport": true,
        "detail": "routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "face_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "face_recognition",
        "description": "face_recognition",
        "detail": "face_recognition",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "AssistanceFirebase",
        "importPath": "services.assistanceFirebase",
        "description": "services.assistanceFirebase",
        "isExtraImport": true,
        "detail": "services.assistanceFirebase",
        "documentation": {}
    },
    {
        "label": "MongoService",
        "importPath": "services.assistanceMongoDB",
        "description": "services.assistanceMongoDB",
        "isExtraImport": true,
        "detail": "services.assistanceMongoDB",
        "documentation": {}
    },
    {
        "label": "MongoService",
        "importPath": "services.assistanceMongoDB",
        "description": "services.assistanceMongoDB",
        "isExtraImport": true,
        "detail": "services.assistanceMongoDB",
        "documentation": {}
    },
    {
        "label": "MongoService",
        "importPath": "services.assistanceMongoDB",
        "description": "services.assistanceMongoDB",
        "isExtraImport": true,
        "detail": "services.assistanceMongoDB",
        "documentation": {}
    },
    {
        "label": "MongoService",
        "importPath": "services.assistanceMongoDB",
        "description": "services.assistanceMongoDB",
        "isExtraImport": true,
        "detail": "services.assistanceMongoDB",
        "documentation": {}
    },
    {
        "label": "MongoService",
        "importPath": "services.assistanceMongoDB",
        "description": "services.assistanceMongoDB",
        "isExtraImport": true,
        "detail": "services.assistanceMongoDB",
        "documentation": {}
    },
    {
        "label": "AddFaceModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddFaceResponseModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddClassPhotoModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddClassPhotoResponseModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "FaceEncodingModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "FaceEncodingResponseModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AttendanceModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AttendanceModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "FaceRec",
        "importPath": "facial_recognition.FaceRec",
        "description": "facial_recognition.FaceRec",
        "isExtraImport": true,
        "detail": "facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "EncodingModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "StudentModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "StudentResponseModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "EncodingModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "EncodingResponseModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "models.PanelModels",
        "description": "models.PanelModels",
        "isExtraImport": true,
        "detail": "models.PanelModels",
        "documentation": {}
    },
    {
        "label": "PanelID",
        "importPath": "models.PanelModels",
        "description": "models.PanelModels",
        "isExtraImport": true,
        "detail": "models.PanelModels",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "models.SubjectModels",
        "description": "models.SubjectModels",
        "isExtraImport": true,
        "detail": "models.SubjectModels",
        "documentation": {}
    },
    {
        "label": "TeacherModel",
        "importPath": "models.TeacherModels",
        "description": "models.TeacherModels",
        "isExtraImport": true,
        "detail": "models.TeacherModels",
        "documentation": {}
    },
    {
        "label": "TeacherIDModel",
        "importPath": "models.TeacherModels",
        "description": "models.TeacherModels",
        "isExtraImport": true,
        "detail": "models.TeacherModels",
        "documentation": {}
    },
    {
        "label": "firebaseStorage",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "connect_to_mongo",
        "importPath": "data.mongodb",
        "description": "data.mongodb",
        "isExtraImport": true,
        "detail": "data.mongodb",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson.objectid",
        "description": "bson.objectid",
        "isExtraImport": true,
        "detail": "bson.objectid",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "client_uploads",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "test_route",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "face_rec",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "college",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "subjects",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "students",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "teachers",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "classes",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "panels",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "cred",
        "kind": 5,
        "importPath": "app.data.firebaseStorage",
        "description": "app.data.firebaseStorage",
        "peekOfCode": "cred = credentials.Certificate(\"attendance-assistant-3b3a3-firebase-adminsdk-vkifz-64ed71fe03.json\")\nfirebase_admin.initialize_app(cred)\nfb_storage = storage.bucket(\"attendance-assistant-3b3a3.appspot.com\")",
        "detail": "app.data.firebaseStorage",
        "documentation": {}
    },
    {
        "label": "fb_storage",
        "kind": 5,
        "importPath": "app.data.firebaseStorage",
        "description": "app.data.firebaseStorage",
        "peekOfCode": "fb_storage = storage.bucket(\"attendance-assistant-3b3a3.appspot.com\")",
        "detail": "app.data.firebaseStorage",
        "documentation": {}
    },
    {
        "label": "connect_to_mongo",
        "kind": 2,
        "importPath": "app.data.mongodb",
        "description": "app.data.mongodb",
        "peekOfCode": "def connect_to_mongo():\n    client = MongoClient(mongodb_uri)\n    db = client['Attendance']\n    return db",
        "detail": "app.data.mongodb",
        "documentation": {}
    },
    {
        "label": "FaceRec",
        "kind": 6,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "class FaceRec:\n\t\"\"\"\n\tContains methods for facial recognition of multiple students, being present in a single image. So basically if you\n\twanna get the attendance of a class, you have to instantiate this class, and then call the methods to get the\n\tattendance. It contains all the methods that will actually perform the facial recognition using multithreading.\n\tAfter you are done you can simply delete the object, and all the data will be cleaned up.\n\t\"\"\"\n\tdef __init__(self, student_face_encodings: dict, class_images: list, panel_id: str, student_ids: list, room_id: str):\n\t\t\"\"\"\n\t\t:param student_face_encodings: dictionary containing the face encodings of the students. The keys are the",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\t\tstudent_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\t\tstudent_face_encodings = {}\n\t\tprint(\"Init Face Recognition!\")\n\t\tself.student_face_encodings = student_face_encodings\n\t\tself.class_images = class_images\n\t\tself.room_id = room_id\n\t\tself.panel_id = panel_id\n\t\tself.students_present = []\n\t\tself.students_absent = []\n\t\tself.student_ids = student_ids\n\tdef find_attendance(self):",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.student_face_encodings = student_face_encodings\n\t\tself.class_images = class_images\n\t\tself.room_id = room_id\n\t\tself.panel_id = panel_id\n\t\tself.students_present = []\n\t\tself.students_absent = []\n\t\tself.student_ids = student_ids\n\tdef find_attendance(self):\n\t\t\"\"\"\n\t\tPerform the facial recognition on the class images, and return the attendance.",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.class_images",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.class_images = class_images\n\t\tself.room_id = room_id\n\t\tself.panel_id = panel_id\n\t\tself.students_present = []\n\t\tself.students_absent = []\n\t\tself.student_ids = student_ids\n\tdef find_attendance(self):\n\t\t\"\"\"\n\t\tPerform the facial recognition on the class images, and return the attendance.\n\t\t\"\"\"",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.room_id",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.room_id = room_id\n\t\tself.panel_id = panel_id\n\t\tself.students_present = []\n\t\tself.students_absent = []\n\t\tself.student_ids = student_ids\n\tdef find_attendance(self):\n\t\t\"\"\"\n\t\tPerform the facial recognition on the class images, and return the attendance.\n\t\t\"\"\"\n\t\t# create threads for each image",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.panel_id",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.panel_id = panel_id\n\t\tself.students_present = []\n\t\tself.students_absent = []\n\t\tself.student_ids = student_ids\n\tdef find_attendance(self):\n\t\t\"\"\"\n\t\tPerform the facial recognition on the class images, and return the attendance.\n\t\t\"\"\"\n\t\t# create threads for each image\n\t\tthreads = []",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.students_present",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.students_present = []\n\t\tself.students_absent = []\n\t\tself.student_ids = student_ids\n\tdef find_attendance(self):\n\t\t\"\"\"\n\t\tPerform the facial recognition on the class images, and return the attendance.\n\t\t\"\"\"\n\t\t# create threads for each image\n\t\tthreads = []\n\t\tfor image in self.class_images:",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.students_absent",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.students_absent = []\n\t\tself.student_ids = student_ids\n\tdef find_attendance(self):\n\t\t\"\"\"\n\t\tPerform the facial recognition on the class images, and return the attendance.\n\t\t\"\"\"\n\t\t# create threads for each image\n\t\tthreads = []\n\t\tfor image in self.class_images:\n\t\t\tt = threading.Thread(target=self.recognize_faces, args=(image,))",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_ids",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.student_ids = student_ids\n\tdef find_attendance(self):\n\t\t\"\"\"\n\t\tPerform the facial recognition on the class images, and return the attendance.\n\t\t\"\"\"\n\t\t# create threads for each image\n\t\tthreads = []\n\t\tfor image in self.class_images:\n\t\t\tt = threading.Thread(target=self.recognize_faces, args=(image,))\n\t\t\tthreads.append(t)",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tthreads",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tthreads = []\n\t\tfor image in self.class_images:\n\t\t\tt = threading.Thread(target=self.recognize_faces, args=(image,))\n\t\t\tthreads.append(t)\n\t\t\tt.start()\n\t\t# wait for all threads to finish\n\t\tfor t in threads:\n\t\t\tt.join()\n\t\t# filter the students_present list to remove duplicates\n\t\tself.students_present = list(set(self.students_present))",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\t\tt",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\t\tt = threading.Thread(target=self.recognize_faces, args=(image,))\n\t\t\tthreads.append(t)\n\t\t\tt.start()\n\t\t# wait for all threads to finish\n\t\tfor t in threads:\n\t\t\tt.join()\n\t\t# filter the students_present list to remove duplicates\n\t\tself.students_present = list(set(self.students_present))\n\t\t# get absent students\n\t\tself.students_absent = list(set(self.student_ids) - set(self.students_present))",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.students_present",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.students_present = list(set(self.students_present))\n\t\t# get absent students\n\t\tself.students_absent = list(set(self.student_ids) - set(self.students_present))\n\t\treturn self.students_present, self.students_absent\n\tdef recognize_faces(self, image):\n\t\t\"\"\"\n\t\tRecognize the faces in the given image, and update the attendance.\n\t\t\"\"\"\n\t\t# load the image\n\t\timage = face_recognition.load_image_file(image)",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.students_absent",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.students_absent = list(set(self.student_ids) - set(self.students_present))\n\t\treturn self.students_present, self.students_absent\n\tdef recognize_faces(self, image):\n\t\t\"\"\"\n\t\tRecognize the faces in the given image, and update the attendance.\n\t\t\"\"\"\n\t\t# load the image\n\t\timage = face_recognition.load_image_file(image)\n\t\t# get the face locations\n\t\tface_locations = face_recognition.face_locations(image)",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\timage",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\timage = face_recognition.load_image_file(image)\n\t\t# get the face locations\n\t\tface_locations = face_recognition.face_locations(image)\n\t\t# get the face encodings\n\t\tface_encodings = face_recognition.face_encodings(image, face_locations)\n\t\t# check if the face encodings match with the students' face encodings\n\t\tfor face_encoding in face_encodings:\n\t\t\t# compare the face encodings\n\t\t\tmatches = face_recognition.compare_faces(list(self.student_face_encodings.values()), face_encoding)\n\t\t\t# get the student id",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tface_locations",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tface_locations = face_recognition.face_locations(image)\n\t\t# get the face encodings\n\t\tface_encodings = face_recognition.face_encodings(image, face_locations)\n\t\t# check if the face encodings match with the students' face encodings\n\t\tfor face_encoding in face_encodings:\n\t\t\t# compare the face encodings\n\t\t\tmatches = face_recognition.compare_faces(list(self.student_face_encodings.values()), face_encoding)\n\t\t\t# get the student id\n\t\t\tstudent_id = list(self.student_face_encodings.keys())[matches.index(True)]\n\t\t\t# add the student to the present list",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tface_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tface_encodings = face_recognition.face_encodings(image, face_locations)\n\t\t# check if the face encodings match with the students' face encodings\n\t\tfor face_encoding in face_encodings:\n\t\t\t# compare the face encodings\n\t\t\tmatches = face_recognition.compare_faces(list(self.student_face_encodings.values()), face_encoding)\n\t\t\t# get the student id\n\t\t\tstudent_id = list(self.student_face_encodings.keys())[matches.index(True)]\n\t\t\t# add the student to the present list\n\t\t\tself.students_present.append(student_id)\n\tdef add_student_face_encodings(self, student_id, student_face_encodings):",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\t\tmatches",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\t\tmatches = face_recognition.compare_faces(list(self.student_face_encodings.values()), face_encoding)\n\t\t\t# get the student id\n\t\t\tstudent_id = list(self.student_face_encodings.keys())[matches.index(True)]\n\t\t\t# add the student to the present list\n\t\t\tself.students_present.append(student_id)\n\tdef add_student_face_encodings(self, student_id, student_face_encodings):\n\t\t\"\"\"\n\t\tAdd the face encodings of the student to the class face encodings.\n\t\t\"\"\"\n\t\tself.student_face_encodings[student_id] = student_face_encodings",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\t\tstudent_id",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\t\tstudent_id = list(self.student_face_encodings.keys())[matches.index(True)]\n\t\t\t# add the student to the present list\n\t\t\tself.students_present.append(student_id)\n\tdef add_student_face_encodings(self, student_id, student_face_encodings):\n\t\t\"\"\"\n\t\tAdd the face encodings of the student to the class face encodings.\n\t\t\"\"\"\n\t\tself.student_face_encodings[student_id] = student_face_encodings\n\tdef add_class_images(self, class_images):\n\t\t\"\"\"",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_face_encodings[student_id]",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.student_face_encodings[student_id] = student_face_encodings\n\tdef add_class_images(self, class_images):\n\t\t\"\"\"\n\t\tAdd the class images to the class images list.\n\t\t\"\"\"\n\t\tself.class_images.append(class_images)\n\t# clean up\n\tdef __del__(self):\n\t\t\"\"\"\n\t\tClean up the object.",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.students_present",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.students_present = students_present\n\tdef set_students_absent(self, students_absent):\n\t\t\"\"\"\n\t\tSet the students absent in the class.\n\t\t\"\"\"\n\t\tself.students_absent = students_absent\n\tdef set_student_face_encodings(self, student_face_encodings):\n\t\t\"\"\"\n\t\tSet the student face encodings.\n\t\t\"\"\"",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.students_absent",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.students_absent = students_absent\n\tdef set_student_face_encodings(self, student_face_encodings):\n\t\t\"\"\"\n\t\tSet the student face encodings.\n\t\t\"\"\"\n\t\tself.student_face_encodings = student_face_encodings\n\tdef set_class_images(self, class_images):\n\t\t\"\"\"\n\t\tSet the class images.\n\t\t\"\"\"",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.student_face_encodings = student_face_encodings\n\tdef set_class_images(self, class_images):\n\t\t\"\"\"\n\t\tSet the class images.\n\t\t\"\"\"\n\t\tself.class_images = class_images\n\tdef set_panel_id(self, panel_id):\n\t\t\"\"\"\n\t\tSet the panel id.\n\t\t\"\"\"",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.class_images",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.class_images = class_images\n\tdef set_panel_id(self, panel_id):\n\t\t\"\"\"\n\t\tSet the panel id.\n\t\t\"\"\"\n\t\tself.panel_id = panel_id\n\tdef set_student_ids(self, student_ids):\n\t\t\"\"\"\n\t\tSet the student ids.\n\t\t\"\"\"",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.panel_id",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.panel_id = panel_id\n\tdef set_student_ids(self, student_ids):\n\t\t\"\"\"\n\t\tSet the student ids.\n\t\t\"\"\"\n\t\tself.student_ids = student_ids",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_ids",
        "kind": 5,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "\t\tself.student_ids = student_ids",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "StudentManager",
        "kind": 6,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "class StudentManager:\n\tdef __init__(self, student_id: str, student_face_image_urls: list, student_face_encodings: list = []):\n\t\t\"\"\"\n\t\tThis class should be instantiated when we want to not actually perform any facial Recognition, but create\n\t\tencodings for the students, and update them to and from the databases. :param student_id: id of the student\n\t\twhose faces are provided in the images list :param student_face_image_urls: list of image urls that contain\n\t\tonly one face, the face belonging to student with id 'student_id' :param student_face_encodings: list of face\n\t\tencodings of the student, note that these are not serialized, and are just the face encodings\n\t\t\"\"\"\n\t\tprint(\"Init Student Recognition Methods!\")",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_id",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.student_id = student_id\n\t\tself.student_face_encodings = student_face_encodings\n\t\tself.number_of_faces = 0\n\t\tself.serialized_student_face_encodings = None\n\t\tself.student_faces_image_urls = student_face_image_urls\n\tdef create_face_encoding(self):\n\t\t\"\"\"\n\t\tCreate face encoding for the given image. Also create the serialized face encodings.\n\t\timages: list of image urls that contain only one face, the face belonging to student with id 'student_id'\n\t\tid: id of the student whose faces are provided in the images list",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.student_face_encodings = student_face_encodings\n\t\tself.number_of_faces = 0\n\t\tself.serialized_student_face_encodings = None\n\t\tself.student_faces_image_urls = student_face_image_urls\n\tdef create_face_encoding(self):\n\t\t\"\"\"\n\t\tCreate face encoding for the given image. Also create the serialized face encodings.\n\t\timages: list of image urls that contain only one face, the face belonging to student with id 'student_id'\n\t\tid: id of the student whose faces are provided in the images list\n\t\t\"\"\"",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.number_of_faces",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.number_of_faces = 0\n\t\tself.serialized_student_face_encodings = None\n\t\tself.student_faces_image_urls = student_face_image_urls\n\tdef create_face_encoding(self):\n\t\t\"\"\"\n\t\tCreate face encoding for the given image. Also create the serialized face encodings.\n\t\timages: list of image urls that contain only one face, the face belonging to student with id 'student_id'\n\t\tid: id of the student whose faces are provided in the images list\n\t\t\"\"\"\n\t\t# Create face encoding for the given images",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.serialized_student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.serialized_student_face_encodings = None\n\t\tself.student_faces_image_urls = student_face_image_urls\n\tdef create_face_encoding(self):\n\t\t\"\"\"\n\t\tCreate face encoding for the given image. Also create the serialized face encodings.\n\t\timages: list of image urls that contain only one face, the face belonging to student with id 'student_id'\n\t\tid: id of the student whose faces are provided in the images list\n\t\t\"\"\"\n\t\t# Create face encoding for the given images\n\t\tfor image in self.student_faces_image_urls:",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_faces_image_urls",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.student_faces_image_urls = student_face_image_urls\n\tdef create_face_encoding(self):\n\t\t\"\"\"\n\t\tCreate face encoding for the given image. Also create the serialized face encodings.\n\t\timages: list of image urls that contain only one face, the face belonging to student with id 'student_id'\n\t\tid: id of the student whose faces are provided in the images list\n\t\t\"\"\"\n\t\t# Create face encoding for the given images\n\t\tfor image in self.student_faces_image_urls:\n\t\t\tstudent_image = face_recognition.load_image_file(image)",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\t\tstudent_image",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\t\tstudent_image = face_recognition.load_image_file(image)\n\t\t\tself.student_face_encodings.append(\n\t\t\t\tface_recognition.face_encodings(student_image)[0]\n\t\t\t)\n\t\t# serialize student_face_encodings so that we can upload it using pickle\n\t\tself.serialized_student_face_encodings = pickle.dumps(self.student_face_encodings)\n\tdef update_face_encoding(self, new_face_url, student_id):\n\t\t\"\"\"\n\t\tUpdate the face encoding of the student with the new face.\n\t\tnew_face: image url of the new face of the student",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.serialized_student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.serialized_student_face_encodings = pickle.dumps(self.student_face_encodings)\n\tdef update_face_encoding(self, new_face_url, student_id):\n\t\t\"\"\"\n\t\tUpdate the face encoding of the student with the new face.\n\t\tnew_face: image url of the new face of the student\n\t\tstudent_id: id of the student whose face is to be updated\n\t\t\"\"\"\n\t\t# Create face encoding for the given image\n\t\tnew_student_image = face_recognition.load_image_file(new_face_url)\n\t\tstudent_face_encoding = face_recognition.face_encodings(new_student_image)[0]",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tnew_student_image",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tnew_student_image = face_recognition.load_image_file(new_face_url)\n\t\tstudent_face_encoding = face_recognition.face_encodings(new_student_image)[0]\n\t\t# append to the list of face encodings\n\t\tself.student_face_encodings.append(student_face_encoding)\n\t\t# serialize student_face_encoding so that we can upload it using pickle\n\t\tself.serialized_student_face_encodings = pickle.dumps(self.student_face_encodings)\n\tdef delete_face_encodings(self, student_id):\n\t\t\"\"\"\n\t\tDelete the face encoding of the student with the given id.\n\t\tstudent_id: id of the student whose face is to be deleted",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tstudent_face_encoding",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tstudent_face_encoding = face_recognition.face_encodings(new_student_image)[0]\n\t\t# append to the list of face encodings\n\t\tself.student_face_encodings.append(student_face_encoding)\n\t\t# serialize student_face_encoding so that we can upload it using pickle\n\t\tself.serialized_student_face_encodings = pickle.dumps(self.student_face_encodings)\n\tdef delete_face_encodings(self, student_id):\n\t\t\"\"\"\n\t\tDelete the face encoding of the student with the given id.\n\t\tstudent_id: id of the student whose face is to be deleted\n\t\t\"\"\"",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.serialized_student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.serialized_student_face_encodings = pickle.dumps(self.student_face_encodings)\n\tdef delete_face_encodings(self, student_id):\n\t\t\"\"\"\n\t\tDelete the face encoding of the student with the given id.\n\t\tstudent_id: id of the student whose face is to be deleted\n\t\t\"\"\"\n\t\t# clear all the face encodings\n\t\tself.student_face_encodings = []\n\t\tself.serialized_student_face_encodings = None\n\t# getter methods",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.student_face_encodings = []\n\t\tself.serialized_student_face_encodings = None\n\t# getter methods\n\tdef get_student_id(self):\n\t\t\"\"\"\n\t\tGet the student id.\n\t\t\"\"\"\n\t\treturn self.student_id\n\tdef get_student_face_encodings(self):\n\t\t\"\"\"",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.serialized_student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.serialized_student_face_encodings = None\n\t# getter methods\n\tdef get_student_id(self):\n\t\t\"\"\"\n\t\tGet the student id.\n\t\t\"\"\"\n\t\treturn self.student_id\n\tdef get_student_face_encodings(self):\n\t\t\"\"\"\n\t\tGet the student face encodings.",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_id",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.student_id = student_id\n\tdef set_student_face_encodings(self, student_face_encodings):\n\t\t\"\"\"\n\t\tSet the student face encodings.\n\t\t\"\"\"\n\t\tself.student_face_encodings = student_face_encodings\n\tdef set_number_of_faces(self, number_of_faces):\n\t\t\"\"\"\n\t\tSet the number of faces.\n\t\t\"\"\"",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.student_face_encodings = student_face_encodings\n\tdef set_number_of_faces(self, number_of_faces):\n\t\t\"\"\"\n\t\tSet the number of faces.\n\t\t\"\"\"\n\t\tself.number_of_faces = number_of_faces\n\tdef set_serialized_student_face_encodings(self, serialized_student_face_encodings):\n\t\t\"\"\"\n\t\tSet the serialized student face encodings.\n\t\t\"\"\"",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.number_of_faces",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.number_of_faces = number_of_faces\n\tdef set_serialized_student_face_encodings(self, serialized_student_face_encodings):\n\t\t\"\"\"\n\t\tSet the serialized student face encodings.\n\t\t\"\"\"\n\t\tself.serialized_student_face_encodings = serialized_student_face_encodings\n\tdef set_student_faces_image_urls(self, student_faces_image_urls):\n\t\t\"\"\"\n\t\tSet the student faces image urls.\n\t\t\"\"\"",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.serialized_student_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.serialized_student_face_encodings = serialized_student_face_encodings\n\tdef set_student_faces_image_urls(self, student_faces_image_urls):\n\t\t\"\"\"\n\t\tSet the student faces image urls.\n\t\t\"\"\"\n\t\tself.student_faces_image_urls = student_faces_image_urls",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "\t\tself.student_faces_image_urls",
        "kind": 5,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "\t\tself.student_faces_image_urls = student_faces_image_urls",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "current_file_directory",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "current_file_directory = os.path.dirname(os.path.abspath(__file__))\n# Get the parent directory\nparent_directory = os.path.dirname(current_file_directory)\n# Get the directory of images\nimages_directory = os.path.join(parent_directory, \"images\")\n# get the testing images directory\ntesting_images_directory = os.path.join(images_directory, \"test\")\nimage_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "parent_directory",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "parent_directory = os.path.dirname(current_file_directory)\n# Get the directory of images\nimages_directory = os.path.join(parent_directory, \"images\")\n# get the testing images directory\ntesting_images_directory = os.path.join(images_directory, \"test\")\nimage_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):\n\timage_files.append(filename)\nknown_face_encodings = []",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "images_directory",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "images_directory = os.path.join(parent_directory, \"images\")\n# get the testing images directory\ntesting_images_directory = os.path.join(images_directory, \"test\")\nimage_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):\n\timage_files.append(filename)\nknown_face_encodings = []\n# Load the known images (create face encodings) for all image_files\nfor filename in image_files:",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "testing_images_directory",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "testing_images_directory = os.path.join(images_directory, \"test\")\nimage_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):\n\timage_files.append(filename)\nknown_face_encodings = []\n# Load the known images (create face encodings) for all image_files\nfor filename in image_files:\n\timage = face_recognition.load_image_file(os.path.join(images_directory, \"known_faces\", filename))\n\tknown_face_encodings.append(face_recognition.face_encodings(image)[0])",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "image_files",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "image_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):\n\timage_files.append(filename)\nknown_face_encodings = []\n# Load the known images (create face encodings) for all image_files\nfor filename in image_files:\n\timage = face_recognition.load_image_file(os.path.join(images_directory, \"known_faces\", filename))\n\tknown_face_encodings.append(face_recognition.face_encodings(image)[0])\n# Load all images in the test directory",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "known_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "known_face_encodings = []\n# Load the known images (create face encodings) for all image_files\nfor filename in image_files:\n\timage = face_recognition.load_image_file(os.path.join(images_directory, \"known_faces\", filename))\n\tknown_face_encodings.append(face_recognition.face_encodings(image)[0])\n# Load all images in the test directory\ntest_image_files = []\nfor filename in os.listdir(testing_images_directory):\n\ttest_image_files.append(filename)\nunknown_face_encodings = {}",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "\timage",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "\timage = face_recognition.load_image_file(os.path.join(images_directory, \"known_faces\", filename))\n\tknown_face_encodings.append(face_recognition.face_encodings(image)[0])\n# Load all images in the test directory\ntest_image_files = []\nfor filename in os.listdir(testing_images_directory):\n\ttest_image_files.append(filename)\nunknown_face_encodings = {}\n# create face encodings for all test images\nfor filename in test_image_files:\n\timage = face_recognition.load_image_file(os.path.join(testing_images_directory, filename))",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "test_image_files",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "test_image_files = []\nfor filename in os.listdir(testing_images_directory):\n\ttest_image_files.append(filename)\nunknown_face_encodings = {}\n# create face encodings for all test images\nfor filename in test_image_files:\n\timage = face_recognition.load_image_file(os.path.join(testing_images_directory, filename))\n\tunknown_face_encodings[filename] = face_recognition.face_encodings(image)\nimport face_recognition\n# Load the known images (create face encodings)",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "unknown_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "unknown_face_encodings = {}\n# create face encodings for all test images\nfor filename in test_image_files:\n\timage = face_recognition.load_image_file(os.path.join(testing_images_directory, filename))\n\tunknown_face_encodings[filename] = face_recognition.face_encodings(image)\nimport face_recognition\n# Load the known images (create face encodings)\nimage_of_person_1 = face_recognition.load_image_file(\"person_1.jpg\")\nperson_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "\timage",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "\timage = face_recognition.load_image_file(os.path.join(testing_images_directory, filename))\n\tunknown_face_encodings[filename] = face_recognition.face_encodings(image)\nimport face_recognition\n# Load the known images (create face encodings)\nimage_of_person_1 = face_recognition.load_image_file(\"person_1.jpg\")\nperson_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "\tunknown_face_encodings[filename]",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "\tunknown_face_encodings[filename] = face_recognition.face_encodings(image)\nimport face_recognition\n# Load the known images (create face encodings)\nimage_of_person_1 = face_recognition.load_image_file(\"person_1.jpg\")\nperson_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "image_of_person_1",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "image_of_person_1 = face_recognition.load_image_file(\"person_1.jpg\")\nperson_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "person_1_face_encoding",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "person_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "image_of_person_2",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "image_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encodings = face_recognition.face_encodings(unknown_image)",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "person_2_face_encoding",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "person_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encodings = face_recognition.face_encodings(unknown_image)\n# There might be more than one person in the photo, so we need to check each face encoding",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "known_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "known_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encodings = face_recognition.face_encodings(unknown_image)\n# There might be more than one person in the photo, so we need to check each face encoding\nfor unknown_face_encoding in unknown_face_encodings:\n    # Test if this unknown face encoding matches any of the known face encodings",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "unknown_image",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "unknown_image = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encodings = face_recognition.face_encodings(unknown_image)\n# There might be more than one person in the photo, so we need to check each face encoding\nfor unknown_face_encoding in unknown_face_encodings:\n    # Test if this unknown face encoding matches any of the known face encodings\n    results = face_recognition.compare_faces(known_face_encodings, unknown_face_encoding)\n    name = \"Unknown\"\n    if results[0]:\n        name = \"Person 1\"\n    elif results[1]:",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "unknown_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "unknown_face_encodings = face_recognition.face_encodings(unknown_image)\n# There might be more than one person in the photo, so we need to check each face encoding\nfor unknown_face_encoding in unknown_face_encodings:\n    # Test if this unknown face encoding matches any of the known face encodings\n    results = face_recognition.compare_faces(known_face_encodings, unknown_face_encoding)\n    name = \"Unknown\"\n    if results[0]:\n        name = \"Person 1\"\n    elif results[1]:\n        name = \"Person 2\"",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "Classes",
        "kind": 6,
        "importPath": "app.models.ClassesModels",
        "description": "app.models.ClassesModels",
        "peekOfCode": "class Classes(BaseModel):\n    date: date\n    start_time: datetime\n    end_time: datetime\n    subject_id: str\n    teacher_id: str\n    panel_id: str\n    semester: str\n    room_id: str\n    students_present: List[str]",
        "detail": "app.models.ClassesModels",
        "documentation": {}
    },
    {
        "label": "AttendanceModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AttendanceModel(BaseModel):\n    room_id: str\n    subject_id: str\n    teacher_id: str\n    panel_id: str\n    start_time: datetime\n    end_time: datetime\n    @field_validator(\"start_time\")\n    def start_time_must_be_before_end_time(cls, v, values):\n        pass",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddFaceModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AddFaceModel(BaseModel):\n    student_id: str\n    face_image: bytes  # the image of the face to be added. from fastapi uploads.\nclass AddFaceResponseModel(BaseModel):\n    student_id: str\n    face_image_url: str  # from the place face image is stored.\nclass AddClassPhotoModel(BaseModel):\n    room_id: str\n    date: date\n    time: time",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddFaceResponseModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AddFaceResponseModel(BaseModel):\n    student_id: str\n    face_image_url: str  # from the place face image is stored.\nclass AddClassPhotoModel(BaseModel):\n    room_id: str\n    date: date\n    time: time\n    class_photo: bytes  # the image of the class to be added\n    # date must follow the format YYYY-MM-DD HH:MM:SS\n    @field_validator(\"date\")",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddClassPhotoModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AddClassPhotoModel(BaseModel):\n    room_id: str\n    date: date\n    time: time\n    class_photo: bytes  # the image of the class to be added\n    # date must follow the format YYYY-MM-DD HH:MM:SS\n    @field_validator(\"date\")\n    def date_format(cls, v):\n        v = \"%Y-%m-%d\"\n        try:",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddClassPhotoResponseModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AddClassPhotoResponseModel(BaseModel):\n    room_id: str\n    date: date\n    time: time\n    class_photo_url: str  # from the place class photo is stored.\nclass FaceEncodingModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding: bytes\nclass FaceEncodingResponseModel(BaseModel):",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "FaceEncodingModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class FaceEncodingModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding: bytes\nclass FaceEncodingResponseModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding_url: str  # from the place encoding is stored.",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "FaceEncodingResponseModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class FaceEncodingResponseModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding_url: str  # from the place encoding is stored.",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "Panel",
        "kind": 6,
        "importPath": "app.models.PanelModels",
        "description": "app.models.PanelModels",
        "peekOfCode": "class Panel(BaseModel):\n    panel_letter: str\n    school: str\n    specialization: str\n    students: List[str]\n    semesters: List[str]\n    current_semester: str\nclass PanelID(BaseModel):\n    panel_id: str",
        "detail": "app.models.PanelModels",
        "documentation": {}
    },
    {
        "label": "PanelID",
        "kind": 6,
        "importPath": "app.models.PanelModels",
        "description": "app.models.PanelModels",
        "peekOfCode": "class PanelID(BaseModel):\n    panel_id: str",
        "detail": "app.models.PanelModels",
        "documentation": {}
    },
    {
        "label": "StudentModel",
        "kind": 6,
        "importPath": "app.models.StudentModels",
        "description": "app.models.StudentModels",
        "peekOfCode": "class StudentModel(BaseModel):\n    name: str\n    prn: str\n    panel: str\n    panel_roll_no: int\n    face_encoding: Optional[str] = \"\"\n    faces: Optional[List] = []\n    # add validators to check if the panels and stuff are actually valid, cache databases if necessary to avoid multiple router calls\n    def set_id(self, _id):\n        self._id = _id",
        "detail": "app.models.StudentModels",
        "documentation": {}
    },
    {
        "label": "StudentResponseModel",
        "kind": 6,
        "importPath": "app.models.StudentModels",
        "description": "app.models.StudentModels",
        "peekOfCode": "class StudentResponseModel(BaseModel):\n    student_id: str\n    name: str\n    prn: str\n    panel: str\n    panel_roll_no: Optional[int] = None\n# this is what should be called when getting an encoding for a student face.\n# used to store this encoding in firebase. The url is returned of the stored encoding, and is stored in mongodb.\nclass EncodingModel(BaseModel):\n    student_id: str",
        "detail": "app.models.StudentModels",
        "documentation": {}
    },
    {
        "label": "EncodingModel",
        "kind": 6,
        "importPath": "app.models.StudentModels",
        "description": "app.models.StudentModels",
        "peekOfCode": "class EncodingModel(BaseModel):\n    student_id: str\nclass EncodingResponseModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding_url: str # this is the firebase url where the encoding is stored.",
        "detail": "app.models.StudentModels",
        "documentation": {}
    },
    {
        "label": "EncodingResponseModel",
        "kind": 6,
        "importPath": "app.models.StudentModels",
        "description": "app.models.StudentModels",
        "peekOfCode": "class EncodingResponseModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding_url: str # this is the firebase url where the encoding is stored.",
        "detail": "app.models.StudentModels",
        "documentation": {}
    },
    {
        "label": "Subject",
        "kind": 6,
        "importPath": "app.models.SubjectModels",
        "description": "app.models.SubjectModels",
        "peekOfCode": "class Subject(BaseModel):\n    name: str\n    subject_code: str",
        "detail": "app.models.SubjectModels",
        "documentation": {}
    },
    {
        "label": "TeacherModel",
        "kind": 6,
        "importPath": "app.models.TeacherModels",
        "description": "app.models.TeacherModels",
        "peekOfCode": "class TeacherModel(BaseModel):\n    name: str\n    email: str\n    subjects: List[str]\n    panels: List[str]\nclass TeacherIDModel(BaseModel):\n    teacher_id: str",
        "detail": "app.models.TeacherModels",
        "documentation": {}
    },
    {
        "label": "TeacherIDModel",
        "kind": 6,
        "importPath": "app.models.TeacherModels",
        "description": "app.models.TeacherModels",
        "peekOfCode": "class TeacherIDModel(BaseModel):\n    teacher_id: str",
        "detail": "app.models.TeacherModels",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.classes",
        "description": "app.routers.classes",
        "peekOfCode": "def index():\n    return Response(content=\"Hello, World!\", status_code=200)",
        "detail": "app.routers.classes",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.classes",
        "description": "app.routers.classes",
        "peekOfCode": "router = APIRouter(prefix=\"/classes\", tags=[\"Classes and Class Images\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index():\n    return Response(content=\"Hello, World!\", status_code=200)",
        "detail": "app.routers.classes",
        "documentation": {}
    },
    {
        "label": "fb_storage",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "fb_storage = AssistanceFirebase()\nrouter = APIRouter(\n\tprefix=\"/upload\", tags=[\"Upload Images or Attendance Info from App/Website/Pi\"]\n)\n@router.post(\"/add_student_face_from_url\", response_model=AddFaceResponseModel)\nasync def add_student_face_from_url(student_id: int, face_image_url: str):\n\t\"\"\"\n\tAdds a face to the student's row in the student collection in the database. This is going to be one of the base faces of the student, from which the model trains.\n\t:return: URL of the uploaded image.\n\t\"\"\"",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "router = APIRouter(\n\tprefix=\"/upload\", tags=[\"Upload Images or Attendance Info from App/Website/Pi\"]\n)\n@router.post(\"/add_student_face_from_url\", response_model=AddFaceResponseModel)\nasync def add_student_face_from_url(student_id: int, face_image_url: str):\n\t\"\"\"\n\tAdds a face to the student's row in the student collection in the database. This is going to be one of the base faces of the student, from which the model trains.\n\t:return: URL of the uploaded image.\n\t\"\"\"\n\ttry:",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\t\tmongo_obj",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\t\tmongo_obj = MongoService()\n\t\tawait mongo_obj.add_student_face_to_db(face_image_url, student_id)\n\texcept Exception as e:\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\n\t\t\t\t\"detail\": f\"An error occurred while adding face to database: {str(e)}\"\n\t\t\t},\n\t\t)\n\t# to return information about the face that was added, we create a new object of the AddFaceModel class,",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\toutput_face_model",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\toutput_face_model = AddFaceResponseModel(\n\t\tstudent_id=student_id, face_image_url=face_image_url\n\t)\n\treturn Response(status_code=200, content=output_face_model)\n@router.post(\"/add_student_face\", response_model=AddFaceResponseModel)\nasync def add_student_face(student_id: str, face_image: UploadFile = File(...)):\n\t\"\"\"\n\tUploads face image to firebase. This is going to be one of the base faces of the student, from which the model trains.\n\t:return: URL of the uploaded image.\n\t\"\"\"",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\tface_image",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\tface_image = await face_image.read()\n\tadd_face_model = AddFaceModel(student_id=student_id, face_image=face_image)\n\t# upload image to firebase\n\ttry:\n\t\tface_image_url = fb_storage.upload_image(face_image)\n\texcept Exception as e:\n\t\tprint(e)\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\"detail\": f\"An error occurred while uploading image: {str(e)}\"},",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\tadd_face_model",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\tadd_face_model = AddFaceModel(student_id=student_id, face_image=face_image)\n\t# upload image to firebase\n\ttry:\n\t\tface_image_url = fb_storage.upload_image(face_image)\n\texcept Exception as e:\n\t\tprint(e)\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\"detail\": f\"An error occurred while uploading image: {str(e)}\"},\n\t\t)",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\t\tface_image_url",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\t\tface_image_url = fb_storage.upload_image(face_image)\n\texcept Exception as e:\n\t\tprint(e)\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\"detail\": f\"An error occurred while uploading image: {str(e)}\"},\n\t\t)\n\t# add the face to the student's row in the student collection in mongodb.\n\ttry:\n\t\t# add this face to the student's row in student collection in the database.",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\t\tmongo_obj",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\t\tmongo_obj = MongoService()\n\t\tmongo_obj.add_student_face_to_db(student_id, face_image_url)\n\texcept Exception as e:\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\n\t\t\t\t\"detail\": f\"Uploaded Image {face_image_url}, but An error occurred while adding face to database: {str(e)}\"\n\t\t\t},\n\t\t)\n\t# to return information about the face that was added, we create a new object of the AddFaceModel class,",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\toutput_face_model",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\toutput_face_model = AddFaceResponseModel(\n\t\tstudent_id=add_face_model.student_id, face_image_url=face_image_url\n\t)\n\treturn output_face_model\n@router.post(\"/add_class_photo_from_url\", response_model=AddClassPhotoResponseModel)\nasync def add_class_photo_from_url(\n\t\troom_id: str, date: str, time: str, class_photo_url: str\n):\n\t\"\"\"\n\tAdds class photo to firebase. This is ideally from PI. Non ideally from teachers phone.",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\toutput_class_photo",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\toutput_class_photo = AddClassPhotoResponseModel(\n\t\troom_id=room_id, date=date, time=time, class_photo_url=class_photo_url\n\t)\n\treturn Response(status_code=200, content=output_class_photo)\n@router.post(\"/add_class_photo\", response_model=AddClassPhotoResponseModel)\nasync def add_class_photo(\n\t\troom_id: str,\n\t\tdate: str,\n\t\ttime: str,\n\t\tclass_photo: UploadFile = File(...),",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\tclass_photo",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\tclass_photo = await class_photo.read()\n\tadd_class_photo_model = AddClassPhotoModel(\n\t\troom_id=room_id,\n\t\tdate=date,\n\t\ttime=time,\n\t\tclass_photo=class_photo,\n\t)\n\t# upload image to firebase\n\ttry:\n\t\tclass_photo_url = fb_storage.upload_image(class_photo)",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\tadd_class_photo_model",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\tadd_class_photo_model = AddClassPhotoModel(\n\t\troom_id=room_id,\n\t\tdate=date,\n\t\ttime=time,\n\t\tclass_photo=class_photo,\n\t)\n\t# upload image to firebase\n\ttry:\n\t\tclass_photo_url = fb_storage.upload_image(class_photo)\n\texcept Exception as e:",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\t\tclass_photo_url",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\t\tclass_photo_url = fb_storage.upload_image(class_photo)\n\texcept Exception as e:\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\"detail\": f\"An error occurred while uploading image: {str(e)}\"},\n\t\t)\n\t# create a new row in the Lecture Images collection in the database, with the class_id, room_id, date, time,\n\t# class_photo_url\n\t# to return information about the class photo that was added, we create a new object of the AddClassPhotoModel\n\t# class, and return that object.",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\toutput_class_photo",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\toutput_class_photo = AddClassPhotoResponseModel(\n\t\troom_id=add_class_photo_model, class_photo_url=class_photo_url\n\t)\n\treturn Response(status_code=200, content=output_class_photo)\n@router.post(\"/add_attendance\", response_model=AttendanceModel)\nasync def add_attendance(attModel: AttendanceModel):\n\t\"\"\"\n\tAdds attendance to the database. This is information from the teachers' app from the teacher.\n\t:param attModel: Attendance model that contains all the necessary information\n\t:return: URL of the uploaded image.",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\toutput_attendance",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\toutput_attendance = AttendanceModel(\n\t\troom_id=attModel.room_id,\n\t\tdate=attModel.date,\n\t\ttime=attModel.time,\n\t\tstudents=attModel.students,\n\t)\n\treturn Response(status_code=200, content=output_attendance)\n# separating out this funciton to be called from within the server later on without triggering route.\nasync def add_face_encoding(student_id: str, number_of_faces: int, face_encoding):\n\t\"\"\"",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\tface_encoding_model",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\tface_encoding_model = FaceEncodingModel(\n\t\tstudent_id=student_id, number_of_faces=number_of_faces, encoding=face_encoding\n\t)\n\t# upload to firebase\n\ttry:\n\t\tface_encoding_model_url = fb_storage.upload_image(face_encoding)\n\texcept Exception as e:\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\"detail\": f\"An error occurred while uploading image: {str(e)}\"},",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\t\tface_encoding_model_url",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\t\tface_encoding_model_url = fb_storage.upload_image(face_encoding)\n\texcept Exception as e:\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\"detail\": f\"An error occurred while uploading image: {str(e)}\"},\n\t\t)\n\t# add face_encoding_model_url to the database using the face_encoding_model object to the students collection.\n\t# to return information about the face encoding that was added, we create a new object of the FaceEncodingModel class, and return that object.\n\t# these attributes may change.\n\toutput_face_encoding = FaceEncodingResponseModel(",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\toutput_face_encoding",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\toutput_face_encoding = FaceEncodingResponseModel(\n\t\tstudent_id=face_encoding_model.student_id,\n\t\tnumber_of_faces=face_encoding_model.number_of_faces,\n\t\tencoding_url=face_encoding_model_url,\n\t)\n\treturn Response(status_code=200, content=output_face_encoding)\n@router.post(\"/add_face_encoding\", response_model=FaceEncodingModel)\nasync def add_face_encoding_route(\n\t\tstudent_id: str, number_of_faces: int, face_encoding: UploadFile = File(...)\n):",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\tface_encoding",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\tface_encoding = await face_encoding.read()\n\treturn await add_face_encoding(student_id, number_of_faces, face_encoding)\n@router.post(\"/update_face_encoding\", response_model=FaceEncodingResponseModel)\nasync def update_face_encoding(\n\t\told_encoding_url: str,\n\t\tstudent_id: str,\n\t\tnumber_of_faces: int,\n\t\tface_encoding: UploadFile = File(...),\n):\n\t\"\"\"",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\tface_encoding",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\tface_encoding = await face_encoding.read()\n\tface_encoding_model = FaceEncodingModel(\n\t\tstudent_id=student_id, number_of_faces=number_of_faces, encoding=face_encoding\n\t)\n\t# upload the new face encoding to firebase, and get the new url\n\ttry:\n\t\tnew_face_encoding_url = fb_storage.upload_image(face_encoding)\n\texcept Exception as e:\n\t\treturn Response(\n\t\t\tstatus_code=500,",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\tface_encoding_model",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\tface_encoding_model = FaceEncodingModel(\n\t\tstudent_id=student_id, number_of_faces=number_of_faces, encoding=face_encoding\n\t)\n\t# upload the new face encoding to firebase, and get the new url\n\ttry:\n\t\tnew_face_encoding_url = fb_storage.upload_image(face_encoding)\n\texcept Exception as e:\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\"detail\": f\"An error occurred while uploading image: {str(e)}\"},",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\t\tnew_face_encoding_url",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\t\tnew_face_encoding_url = fb_storage.upload_image(face_encoding)\n\texcept Exception as e:\n\t\treturn Response(\n\t\t\tstatus_code=500,\n\t\t\tcontent={\"detail\": f\"An error occurred while uploading image: {str(e)}\"},\n\t\t)\n\t# delete the previous face encoding from firebase\n\ttry:\n\t\tfb_storage.delete_image(old_encoding_url)\n\texcept Exception as e:",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "\toutput_face_encoding",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "\toutput_face_encoding = FaceEncodingResponseModel(\n\t\tstudent_id=face_encoding_model.student_id,\n\t\tnumber_of_faces=face_encoding_model.number_of_faces,\n\t\tencoding_url=new_face_encoding_url,\n\t)\n\treturn Response(status_code=200, content=output_face_encoding)",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "def index():\n    return Response(content=\"Hello, World!\", status_code=200)",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "router = APIRouter(prefix=\"/college\", tags=[\"Rooms and Buildings\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index():\n    return Response(content=\"Hello, World!\", status_code=200)",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.face_rec",
        "description": "app.routers.face_rec",
        "peekOfCode": "def index():\n\ttest_obj = FaceRec()\n\t# so ideally objects of this class would receive encodings of all the students, and the class image. We would get\n\t# this from calling functions of other routes (like getting student urls, encoding urls, etc), and then we would\n\t# call the methods of this class to get the attendance. we would then return that attendance.\n\treturn \"Hello, World!\"\n@router.get(\"/get_attendance\", status_code=200, summary=\"Get attendance\")\ndef get_attendance(class_att: AttendanceModel):\n\tpass",
        "detail": "app.routers.face_rec",
        "documentation": {}
    },
    {
        "label": "get_attendance",
        "kind": 2,
        "importPath": "app.routers.face_rec",
        "description": "app.routers.face_rec",
        "peekOfCode": "def get_attendance(class_att: AttendanceModel):\n\tpass",
        "detail": "app.routers.face_rec",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.face_rec",
        "description": "app.routers.face_rec",
        "peekOfCode": "router = APIRouter(prefix=\"/face_rec\", tags=[\"Face Recognition\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index():\n\ttest_obj = FaceRec()\n\t# so ideally objects of this class would receive encodings of all the students, and the class image. We would get\n\t# this from calling functions of other routes (like getting student urls, encoding urls, etc), and then we would\n\t# call the methods of this class to get the attendance. we would then return that attendance.\n\treturn \"Hello, World!\"\n@router.get(\"/get_attendance\", status_code=200, summary=\"Get attendance\")\ndef get_attendance(class_att: AttendanceModel):",
        "detail": "app.routers.face_rec",
        "documentation": {}
    },
    {
        "label": "\ttest_obj",
        "kind": 5,
        "importPath": "app.routers.face_rec",
        "description": "app.routers.face_rec",
        "peekOfCode": "\ttest_obj = FaceRec()\n\t# so ideally objects of this class would receive encodings of all the students, and the class image. We would get\n\t# this from calling functions of other routes (like getting student urls, encoding urls, etc), and then we would\n\t# call the methods of this class to get the attendance. we would then return that attendance.\n\treturn \"Hello, World!\"\n@router.get(\"/get_attendance\", status_code=200, summary=\"Get attendance\")\ndef get_attendance(class_att: AttendanceModel):\n\tpass",
        "detail": "app.routers.face_rec",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def index():\n    return Response(content=\"Hello, World!\", status_code=200)\n# Add a panel\n@router.post(\"/add_panel\", status_code=201, summary=\"Add a panel\")\ndef add_panel(panel: Panel):\n    \"\"\"\n    This route adds a panel to the database.\n    : param panel: The panel to be added.\n    : return: The added panel.\n    \"\"\"",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "add_panel",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def add_panel(panel: Panel):\n    \"\"\"\n    This route adds a panel to the database.\n    : param panel: The panel to be added.\n    : return: The added panel.\n    \"\"\"\n    try:\n        add_panel_service = MongoService()\n        added_panel = add_panel_service.add_panel(panel)\n        if added_panel:",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "get_all_panels",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def get_all_panels():\n    \"\"\"\n    This route gets all the panels from the database.\n    : return: A list of all the panels in the database.\n    \"\"\"\n    try:\n        get_all_panels_service = MongoService()\n        all_panels = get_all_panels_service.get_all_panels()\n        if all_panels:\n            return all_panels",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "router = APIRouter(prefix=\"/panels\", tags=[\"Panels, Schools and Specializations\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index():\n    return Response(content=\"Hello, World!\", status_code=200)\n# Add a panel\n@router.post(\"/add_panel\", status_code=201, summary=\"Add a panel\")\ndef add_panel(panel: Panel):\n    \"\"\"\n    This route adds a panel to the database.\n    : param panel: The panel to be added.",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def index():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.post(\n    \"/add_student\",\n    status_code=200,\n    summary=\"Add a student\",\n    response_model=StudentResponseModel,\n)\ndef add_student(student: StudentModel):\n    # add the student to the database",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "add_student",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def add_student(student: StudentModel):\n    # add the student to the database\n    try:\n        # instantiate the mongo service\n        mongo_obj = MongoService()\n        # call the function from mongo service to add the student\n        student_response = mongo_obj.add_student(student)\n        print(student_response)\n        return StudentResponseModel(\n            student_id=student_response._id,",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "get_students_from_panel_id",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def get_students_from_panel_id(panel_id: PanelID):\n    try:\n        # instantiate the mongo service\n        mongo_obj = MongoService()\n        # call the mongo function to get the student from panel\n        students = mongo_obj.get_student_by_panel_id(panel_id.panel_id)\n        return students\n    except PyMongoError as e:\n        raise HTTPException(status_code=500, detail=str(e))\n    except Exception as e:",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "get_student_encoding",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def get_student_encoding(student_encoding_model: EncodingModel):\n    # get student_id\n    student_id = student_encoding_model.student_id\n    try:\n        # instantiate the mongo service\n        mongo_obj = MongoService()\n        # call the function from mongo service to get the student encoding\n        student_encoding = mongo_obj.get_student_encoding_from_student_id(student_id)\n        print(student_encoding)\n        encoding_response_model = EncodingResponseModel(",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "get_all_students",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def get_all_students():\n    try:\n        # instantiate the mongo service\n        mongo_obj = MongoService()\n        # call the function from mongo service to get all students\n        students = mongo_obj.get_all_students()\n        return students\n    except PyMongoError as e:\n        raise HTTPException(status_code=503, detail=str(e))\n    except Exception as e:",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "router = APIRouter(prefix=\"/student\", tags=[\"Students\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.post(\n    \"/add_student\",\n    status_code=200,\n    summary=\"Add a student\",\n    response_model=StudentResponseModel,\n)",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "def index():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.post(\"/add_subject\", status_code=201, summary=\"Add a subject\")\ndef add_subject(subject: Subject):\n    \"\"\"\n    This route adds a subject to the database.\n    : param subject: The subject to be added.\n    : return: The added subject.\n    \"\"\"\n    try:",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "add_subject",
        "kind": 2,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "def add_subject(subject: Subject):\n    \"\"\"\n    This route adds a subject to the database.\n    : param subject: The subject to be added.\n    : return: The added subject.\n    \"\"\"\n    try:\n        add_subject_service = MongoService()\n        added_subject = add_subject_service.add_subject(subject)\n        if added_subject:",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "get_all_subjects",
        "kind": 2,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "def get_all_subjects():\n    \"\"\"\n    This route gets all the subjects from the database.\n    : return: A list of all the subjects in the database.\n    \"\"\"\n    try:\n        get_all_subjects_service = MongoService()\n        all_subjects = get_all_subjects_service.get_all_subjects()\n        if all_subjects:\n            return all_subjects",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "router = APIRouter(prefix=\"/subjects\", tags=[\"Subjects and Semesters\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.post(\"/add_subject\", status_code=201, summary=\"Add a subject\")\ndef add_subject(subject: Subject):\n    \"\"\"\n    This route adds a subject to the database.\n    : param subject: The subject to be added.\n    : return: The added subject.",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "def index():\n    return Response(content=\"Hello, World!\", status_code=200)\n# Add a teacher\n@router.post(\"/add_teacher\", status_code=201, summary=\"Add a teacher\")\ndef add_teacher(teacher: TeacherModel):\n    try:\n        add_teacher_service = MongoService()\n        added_teacher = add_teacher_service.add_teacher(teacher)\n        if added_teacher:\n            return added_teacher",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "add_teacher",
        "kind": 2,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "def add_teacher(teacher: TeacherModel):\n    try:\n        add_teacher_service = MongoService()\n        added_teacher = add_teacher_service.add_teacher(teacher)\n        if added_teacher:\n            return added_teacher\n        else:\n            raise HTTPException(\n                status_code=500, detail=\"An error occurred while adding the teacher\"\n            )",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "get_all_teachers",
        "kind": 2,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "def get_all_teachers():\n    try:\n        get_all_teachers_service = MongoService()\n        all_teachers = get_all_teachers_service.get_all_teachers()\n        if all_teachers:\n            return all_teachers\n        else:\n            raise HTTPException(\n                status_code=500, detail=\"An error occurred while getting all teachers\"\n            )",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "get_teacher_by_id",
        "kind": 2,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "def get_teacher_by_id(teacher_in_db_model: TeacherIDModel):\n    try:\n        get_teacher_by_id_service = MongoService()\n        teacher = get_teacher_by_id_service.get_teacher_by_id(\n            teacher_in_db_model.teacher_id\n        )\n        if teacher:\n            return teacher.to_dict()\n        else:\n            raise HTTPException(",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "router = APIRouter(prefix=\"/teachers\", tags=[\"Teachers\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index():\n    return Response(content=\"Hello, World!\", status_code=200)\n# Add a teacher\n@router.post(\"/add_teacher\", status_code=201, summary=\"Add a teacher\")\ndef add_teacher(teacher: TeacherModel):\n    try:\n        add_teacher_service = MongoService()\n        added_teacher = add_teacher_service.add_teacher(teacher)",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.test_route",
        "description": "app.routers.test_route",
        "peekOfCode": "def index():\n\treturn Response(status_code=200, content=\"Hello, World!\")",
        "detail": "app.routers.test_route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.test_route",
        "description": "app.routers.test_route",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/test\", status_code=status.HTTP_200_OK, tags=[\"test\"], summary=\"Test route\")\ndef index():\n\treturn Response(status_code=200, content=\"Hello, World!\")",
        "detail": "app.routers.test_route",
        "documentation": {}
    },
    {
        "label": "AssistanceFirebase",
        "kind": 6,
        "importPath": "app.services.assistanceFirebase",
        "description": "app.services.assistanceFirebase",
        "peekOfCode": "class AssistanceFirebase:\n    def __init__(self):\n        self.storage = firebaseStorage.fb_storage\n    def upload_image(self, image):\n        bucket = self.storage\n        unique_name = str(uuid.uuid4())\n        blob = bucket.blob(unique_name + \".jpg\")\n        image_stream = BytesIO(image)\n        blob.upload_from_file(image_stream)\n        blob.make_public()",
        "detail": "app.services.assistanceFirebase",
        "documentation": {}
    },
    {
        "label": "MongoService",
        "kind": 6,
        "importPath": "app.services.assistanceMongoDB",
        "description": "app.services.assistanceMongoDB",
        "peekOfCode": "class MongoService:\n    def __init__(self):\n        self.db = connect_to_mongo()\n    def add_teacher(self, teacher):\n        try:\n            self.db[\"teachers\"].insert_one(teacher.dict())\n            return teacher\n        except Exception as e:\n            print(f\"An error occurred while inserting the teacher: {e}\")\n            return None",
        "detail": "app.services.assistanceMongoDB",
        "documentation": {}
    },
    {
        "label": "mongodb_uri",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "mongodb_uri = os.getenv(\"MONGODB_URI\")\napiKey = os.getenv(\"apiKey\")\nauthDomain = os.getenv(\"authDomain\") \nprojectId = os.getenv(\"projectId\")\nstorageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "apiKey",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "apiKey = os.getenv(\"apiKey\")\nauthDomain = os.getenv(\"authDomain\") \nprojectId = os.getenv(\"projectId\")\nstorageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "authDomain",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "authDomain = os.getenv(\"authDomain\") \nprojectId = os.getenv(\"projectId\")\nstorageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "projectId",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "projectId = os.getenv(\"projectId\")\nstorageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "storageBucket",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "storageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "messagingSenderId",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "messagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "appId",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "appId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "measurementId",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "measurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "port = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\n# Include routers here\nfrom routers import client_uploads, test_route, face_rec, college, subjects, students, teachers, classes, panels\napp.include_router(client_uploads.router)\napp.include_router(students.router)\napp.include_router(face_rec.router)\napp.include_router(panels.router)\napp.include_router(college.router)\napp.include_router(subjects.router)\napp.include_router(teachers.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "firestore_adminCallTransformer",
        "kind": 6,
        "importPath": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "class firestore_adminCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'create_database': ('parent', 'database', 'database_id', ),\n        'create_index': ('parent', 'index', ),\n        'delete_database': ('name', 'etag', ),\n        'delete_index': ('name', ),\n        'export_documents': ('name', 'collection_ids', 'output_uri_prefix', 'namespace_ids', 'snapshot_time', ),\n        'get_database': ('name', ),\n        'get_field': ('name', ),",
        "detail": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestore_adminCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "firestoreCallTransformer",
        "kind": 6,
        "importPath": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "class firestoreCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'batch_get_documents': ('database', 'documents', 'mask', 'transaction', 'new_transaction', 'read_time', ),\n        'batch_write': ('database', 'writes', 'labels', ),\n        'begin_transaction': ('database', 'options', ),\n        'commit': ('database', 'writes', 'transaction', ),\n        'create_document': ('parent', 'collection_id', 'document', 'document_id', 'mask', ),\n        'delete_document': ('name', 'current_document', ),\n        'get_document': ('name', 'mask', 'transaction', 'read_time', ),",
        "detail": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestoreCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def index():\n\treturn {\"message\": \"Hello World\"}\n@app.post(\"/hello\")\ndef index():\n\treturn {\"message\": \"Hello World\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def index():\n\treturn {\"message\": \"Hello World\"}",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\n# app.include_router(image_routes.router)\n# app.include_router(article_routes.router)\n# app.include_router(product_routes.router)\napp.add_middleware(\n\tCORSMiddleware,\n\tallow_origins=[\"http://localhost:3000\"],\n\tallow_credentials=True,\n\tallow_methods=[\"*\"],\n\tallow_headers=[\"*\"],",
        "detail": "main",
        "documentation": {}
    }
]