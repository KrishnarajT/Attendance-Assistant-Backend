[
    {
        "label": "firebase_admin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "credentials",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "firebase_admin",
        "description": "firebase_admin",
        "isExtraImport": true,
        "detail": "firebase_admin",
        "documentation": {}
    },
    {
        "label": "MongoClient",
        "importPath": "pymongo",
        "description": "pymongo",
        "isExtraImport": true,
        "detail": "pymongo",
        "documentation": {}
    },
    {
        "label": "mongodb_uri",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "pickle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pickle",
        "description": "pickle",
        "detail": "pickle",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "face_recognition",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "face_recognition",
        "description": "face_recognition",
        "detail": "face_recognition",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "AssistanceFirebase",
        "importPath": "services.assistanceFirebase",
        "description": "services.assistanceFirebase",
        "isExtraImport": true,
        "detail": "services.assistanceFirebase",
        "documentation": {}
    },
    {
        "label": "AssistanceFirebase",
        "importPath": "services.assistanceFirebase",
        "description": "services.assistanceFirebase",
        "isExtraImport": true,
        "detail": "services.assistanceFirebase",
        "documentation": {}
    },
    {
        "label": "get_lecture_images_between_time_on_date",
        "importPath": "services.lecture_services",
        "description": "services.lecture_services",
        "isExtraImport": true,
        "detail": "services.lecture_services",
        "documentation": {}
    },
    {
        "label": "add_class_photo_to_db",
        "importPath": "services.lecture_services",
        "description": "services.lecture_services",
        "isExtraImport": true,
        "detail": "services.lecture_services",
        "documentation": {}
    },
    {
        "label": "add_lecture",
        "importPath": "services.lecture_services",
        "description": "services.lecture_services",
        "isExtraImport": true,
        "detail": "services.lecture_services",
        "documentation": {}
    },
    {
        "label": "add_lecture",
        "importPath": "services.lecture_services",
        "description": "services.lecture_services",
        "isExtraImport": true,
        "detail": "services.lecture_services",
        "documentation": {}
    },
    {
        "label": "get_lecture",
        "importPath": "services.lecture_services",
        "description": "services.lecture_services",
        "isExtraImport": true,
        "detail": "services.lecture_services",
        "documentation": {}
    },
    {
        "label": "get_all_lectures",
        "importPath": "services.lecture_services",
        "description": "services.lecture_services",
        "isExtraImport": true,
        "detail": "services.lecture_services",
        "documentation": {}
    },
    {
        "label": "get_lecture_images_between_time_on_date",
        "importPath": "services.lecture_services",
        "description": "services.lecture_services",
        "isExtraImport": true,
        "detail": "services.lecture_services",
        "documentation": {}
    },
    {
        "label": "StudentManager",
        "importPath": "facial_recognition.StudentManager",
        "description": "facial_recognition.StudentManager",
        "isExtraImport": true,
        "detail": "facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "FaceRec",
        "importPath": "facial_recognition.FaceRec",
        "description": "facial_recognition.FaceRec",
        "isExtraImport": true,
        "detail": "facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "FaceRec",
        "importPath": "facial_recognition.FaceRec",
        "description": "facial_recognition.FaceRec",
        "isExtraImport": true,
        "detail": "facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "AddFaceModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddFaceResponseModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddClassPhotoModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddClassPhotoResponseModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "FaceEncodingModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "FaceEncodingResponseModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AttendanceModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AttendanceModel",
        "importPath": "models.ClientUploadModels",
        "description": "models.ClientUploadModels",
        "isExtraImport": true,
        "detail": "models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "services.panel_services",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_student_encodings_from_panel_id",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_current_sem_from_panel",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_panel",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_all_panels",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "set_current_sem_for_panel",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_semester_to_panel",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_student_to_panel",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_student_by_panel_id",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_semester",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_all_semesters",
        "importPath": "services.panel_services",
        "description": "services.panel_services",
        "isExtraImport": true,
        "detail": "services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_student_face_to_db",
        "importPath": "services.student_services",
        "description": "services.student_services",
        "isExtraImport": true,
        "detail": "services.student_services",
        "documentation": {}
    },
    {
        "label": "add_student_encoding",
        "importPath": "services.student_services",
        "description": "services.student_services",
        "isExtraImport": true,
        "detail": "services.student_services",
        "documentation": {}
    },
    {
        "label": "add_student",
        "importPath": "services.student_services",
        "description": "services.student_services",
        "isExtraImport": true,
        "detail": "services.student_services",
        "documentation": {}
    },
    {
        "label": "get_student_encoding_from_student_id",
        "importPath": "services.student_services",
        "description": "services.student_services",
        "isExtraImport": true,
        "detail": "services.student_services",
        "documentation": {}
    },
    {
        "label": "get_all_students",
        "importPath": "services.student_services",
        "description": "services.student_services",
        "isExtraImport": true,
        "detail": "services.student_services",
        "documentation": {}
    },
    {
        "label": "add_student_encoding",
        "importPath": "services.student_services",
        "description": "services.student_services",
        "isExtraImport": true,
        "detail": "services.student_services",
        "documentation": {}
    },
    {
        "label": "get_student_encodings_from_student_ids",
        "importPath": "services.student_services",
        "description": "services.student_services",
        "isExtraImport": true,
        "detail": "services.student_services",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "PyMongoError",
        "importPath": "pymongo.errors",
        "description": "pymongo.errors",
        "isExtraImport": true,
        "detail": "pymongo.errors",
        "documentation": {}
    },
    {
        "label": "get_all_rooms",
        "importPath": "services.room_services",
        "description": "services.room_services",
        "isExtraImport": true,
        "detail": "services.room_services",
        "documentation": {}
    },
    {
        "label": "add_room",
        "importPath": "services.room_services",
        "description": "services.room_services",
        "isExtraImport": true,
        "detail": "services.room_services",
        "documentation": {}
    },
    {
        "label": "add_building",
        "importPath": "services.room_services",
        "description": "services.room_services",
        "isExtraImport": true,
        "detail": "services.room_services",
        "documentation": {}
    },
    {
        "label": "get_all_buildings",
        "importPath": "services.room_services",
        "description": "services.room_services",
        "isExtraImport": true,
        "detail": "services.room_services",
        "documentation": {}
    },
    {
        "label": "get_rooms_from_building_id",
        "importPath": "services.room_services",
        "description": "services.room_services",
        "isExtraImport": true,
        "detail": "services.room_services",
        "documentation": {}
    },
    {
        "label": "add_room_to_building",
        "importPath": "services.room_services",
        "description": "services.room_services",
        "isExtraImport": true,
        "detail": "services.room_services",
        "documentation": {}
    },
    {
        "label": "RoomModel",
        "importPath": "models.CollegeModels",
        "description": "models.CollegeModels",
        "isExtraImport": true,
        "detail": "models.CollegeModels",
        "documentation": {}
    },
    {
        "label": "BuildingModel",
        "importPath": "models.CollegeModels",
        "description": "models.CollegeModels",
        "isExtraImport": true,
        "detail": "models.CollegeModels",
        "documentation": {}
    },
    {
        "label": "RoomResponseModel",
        "importPath": "models.CollegeModels",
        "description": "models.CollegeModels",
        "isExtraImport": true,
        "detail": "models.CollegeModels",
        "documentation": {}
    },
    {
        "label": "BuildingResponseModel",
        "importPath": "models.CollegeModels",
        "description": "models.CollegeModels",
        "isExtraImport": true,
        "detail": "models.CollegeModels",
        "documentation": {}
    },
    {
        "label": "EncodingModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "StudentModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "StudentResponseModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "EncodingModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "EncodingResponseModel",
        "importPath": "models.StudentModels",
        "description": "models.StudentModels",
        "isExtraImport": true,
        "detail": "models.StudentModels",
        "documentation": {}
    },
    {
        "label": "lectureModel",
        "importPath": "models.lectureModels",
        "description": "models.lectureModels",
        "isExtraImport": true,
        "detail": "models.lectureModels",
        "documentation": {}
    },
    {
        "label": "PanelModel",
        "importPath": "models.PanelModels",
        "description": "models.PanelModels",
        "isExtraImport": true,
        "detail": "models.PanelModels",
        "documentation": {}
    },
    {
        "label": "SchoolModel",
        "importPath": "models.PanelModels",
        "description": "models.PanelModels",
        "isExtraImport": true,
        "detail": "models.PanelModels",
        "documentation": {}
    },
    {
        "label": "SpecializationModel",
        "importPath": "models.PanelModels",
        "description": "models.PanelModels",
        "isExtraImport": true,
        "detail": "models.PanelModels",
        "documentation": {}
    },
    {
        "label": "SpecializationResponseModel",
        "importPath": "models.PanelModels",
        "description": "models.PanelModels",
        "isExtraImport": true,
        "detail": "models.PanelModels",
        "documentation": {}
    },
    {
        "label": "PanelID",
        "importPath": "models.PanelModels",
        "description": "models.PanelModels",
        "isExtraImport": true,
        "detail": "models.PanelModels",
        "documentation": {}
    },
    {
        "label": "SemesterModel",
        "importPath": "models.PanelModels",
        "description": "models.PanelModels",
        "isExtraImport": true,
        "detail": "models.PanelModels",
        "documentation": {}
    },
    {
        "label": "add_school",
        "importPath": "services.school_and_spec_services",
        "description": "services.school_and_spec_services",
        "isExtraImport": true,
        "detail": "services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "get_all_schools",
        "importPath": "services.school_and_spec_services",
        "description": "services.school_and_spec_services",
        "isExtraImport": true,
        "detail": "services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "add_specialization",
        "importPath": "services.school_and_spec_services",
        "description": "services.school_and_spec_services",
        "isExtraImport": true,
        "detail": "services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "get_all_specializations",
        "importPath": "services.school_and_spec_services",
        "description": "services.school_and_spec_services",
        "isExtraImport": true,
        "detail": "services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "update_school_for_panel",
        "importPath": "services.school_and_spec_services",
        "description": "services.school_and_spec_services",
        "isExtraImport": true,
        "detail": "services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "update_spec_for_panel",
        "importPath": "services.school_and_spec_services",
        "description": "services.school_and_spec_services",
        "isExtraImport": true,
        "detail": "services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "add_spec_to_school",
        "importPath": "services.school_and_spec_services",
        "description": "services.school_and_spec_services",
        "isExtraImport": true,
        "detail": "services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "models.SubjectModels",
        "description": "models.SubjectModels",
        "isExtraImport": true,
        "detail": "models.SubjectModels",
        "documentation": {}
    },
    {
        "label": "add_subject",
        "importPath": "services.teacher_and_subject_services",
        "description": "services.teacher_and_subject_services",
        "isExtraImport": true,
        "detail": "services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "get_all_subjects",
        "importPath": "services.teacher_and_subject_services",
        "description": "services.teacher_and_subject_services",
        "isExtraImport": true,
        "detail": "services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "add_teacher",
        "importPath": "services.teacher_and_subject_services",
        "description": "services.teacher_and_subject_services",
        "isExtraImport": true,
        "detail": "services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "get_all_teachers",
        "importPath": "services.teacher_and_subject_services",
        "description": "services.teacher_and_subject_services",
        "isExtraImport": true,
        "detail": "services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "get_teacher_by_id",
        "importPath": "services.teacher_and_subject_services",
        "description": "services.teacher_and_subject_services",
        "isExtraImport": true,
        "detail": "services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "TeacherModel",
        "importPath": "models.TeacherModels",
        "description": "models.TeacherModels",
        "isExtraImport": true,
        "detail": "models.TeacherModels",
        "documentation": {}
    },
    {
        "label": "TeacherIDModel",
        "importPath": "models.TeacherModels",
        "description": "models.TeacherModels",
        "isExtraImport": true,
        "detail": "models.TeacherModels",
        "documentation": {}
    },
    {
        "label": "firebaseStorage",
        "importPath": "data",
        "description": "data",
        "isExtraImport": true,
        "detail": "data",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "connect_to_mongo",
        "importPath": "data.mongodb",
        "description": "data.mongodb",
        "isExtraImport": true,
        "detail": "data.mongodb",
        "documentation": {}
    },
    {
        "label": "connect_to_mongo",
        "importPath": "data.mongodb",
        "description": "data.mongodb",
        "isExtraImport": true,
        "detail": "data.mongodb",
        "documentation": {}
    },
    {
        "label": "connect_to_mongo",
        "importPath": "data.mongodb",
        "description": "data.mongodb",
        "isExtraImport": true,
        "detail": "data.mongodb",
        "documentation": {}
    },
    {
        "label": "connect_to_mongo",
        "importPath": "data.mongodb",
        "description": "data.mongodb",
        "isExtraImport": true,
        "detail": "data.mongodb",
        "documentation": {}
    },
    {
        "label": "connect_to_mongo",
        "importPath": "data.mongodb",
        "description": "data.mongodb",
        "isExtraImport": true,
        "detail": "data.mongodb",
        "documentation": {}
    },
    {
        "label": "connect_to_mongo",
        "importPath": "data.mongodb",
        "description": "data.mongodb",
        "isExtraImport": true,
        "detail": "data.mongodb",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson",
        "description": "bson",
        "isExtraImport": true,
        "detail": "bson",
        "documentation": {}
    },
    {
        "label": "ObjectId",
        "importPath": "bson.objectid",
        "description": "bson.objectid",
        "isExtraImport": true,
        "detail": "bson.objectid",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "client_uploads",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "test_route",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "face_rec",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "college",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "subjects",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "students",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "teachers",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "panels",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "lectures",
        "importPath": "routers",
        "description": "routers",
        "isExtraImport": true,
        "detail": "routers",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sysconfig",
        "description": "sysconfig",
        "detail": "sysconfig",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "tello",
        "importPath": "djitellopy",
        "description": "djitellopy",
        "isExtraImport": true,
        "detail": "djitellopy",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "cred",
        "kind": 5,
        "importPath": "app.data.firebaseStorage",
        "description": "app.data.firebaseStorage",
        "peekOfCode": "cred = credentials.Certificate(\"attendance-assistant-3b3a3-firebase-adminsdk-vkifz-64ed71fe03.json\")\nfirebase_admin.initialize_app(cred)\nfb_storage = storage.bucket(\"attendance-assistant-3b3a3.appspot.com\")",
        "detail": "app.data.firebaseStorage",
        "documentation": {}
    },
    {
        "label": "fb_storage",
        "kind": 5,
        "importPath": "app.data.firebaseStorage",
        "description": "app.data.firebaseStorage",
        "peekOfCode": "fb_storage = storage.bucket(\"attendance-assistant-3b3a3.appspot.com\")",
        "detail": "app.data.firebaseStorage",
        "documentation": {}
    },
    {
        "label": "connect_to_mongo",
        "kind": 2,
        "importPath": "app.data.mongodb",
        "description": "app.data.mongodb",
        "peekOfCode": "def connect_to_mongo():\n    client = MongoClient(mongodb_uri)\n    db = client['Attendance']\n    print(\"connected to mongo db!\")\n    return db",
        "detail": "app.data.mongodb",
        "documentation": {}
    },
    {
        "label": "FaceRec",
        "kind": 6,
        "importPath": "app.facial_recognition.FaceRec",
        "description": "app.facial_recognition.FaceRec",
        "peekOfCode": "class FaceRec:\n    \"\"\"\n    Contains methods for facial recognition of multiple students, being present in a single image. So basically if you\n    wanna get the attendance of a class, you have to instantiate this class, and then call the methods to get the\n    attendance. It contains all the methods that will actually perform the facial recognition using multithreading.\n    After you are done you can simply delete the object, and all the data will be cleaned up.\n    \"\"\"\n    def __init__(\n        self,\n        student_face_encodings: dict,",
        "detail": "app.facial_recognition.FaceRec",
        "documentation": {}
    },
    {
        "label": "StudentManager",
        "kind": 6,
        "importPath": "app.facial_recognition.StudentManager",
        "description": "app.facial_recognition.StudentManager",
        "peekOfCode": "class StudentManager:\n    def __init__(\n        self,\n        student_id: str,\n        student_face_image_urls: list,\n        student_face_encodings: list = [],\n    ):\n        \"\"\"\n        This class should be instantiated when we want to not actually perform any facial Recognition, but create\n        encodings for the students, and update them to and from the dat abases. :param student_id: id of the student",
        "detail": "app.facial_recognition.StudentManager",
        "documentation": {}
    },
    {
        "label": "current_file_directory",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "current_file_directory = os.path.dirname(os.path.abspath(__file__))\n# Get the parent directory\nparent_directory = os.path.dirname(current_file_directory)\n# Get the directory of images\nimages_directory = os.path.join(parent_directory, \"images\")\n# get the testing images directory\ntesting_images_directory = os.path.join(images_directory, \"test\")\nimage_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "parent_directory",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "parent_directory = os.path.dirname(current_file_directory)\n# Get the directory of images\nimages_directory = os.path.join(parent_directory, \"images\")\n# get the testing images directory\ntesting_images_directory = os.path.join(images_directory, \"test\")\nimage_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):\n\timage_files.append(filename)\nknown_face_encodings = []",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "images_directory",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "images_directory = os.path.join(parent_directory, \"images\")\n# get the testing images directory\ntesting_images_directory = os.path.join(images_directory, \"test\")\nimage_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):\n\timage_files.append(filename)\nknown_face_encodings = []\n# Load the known images (create face encodings) for all image_files\nfor filename in image_files:",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "testing_images_directory",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "testing_images_directory = os.path.join(images_directory, \"test\")\nimage_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):\n\timage_files.append(filename)\nknown_face_encodings = []\n# Load the known images (create face encodings) for all image_files\nfor filename in image_files:\n\timage = face_recognition.load_image_file(os.path.join(images_directory, \"known_faces\", filename))\n\tknown_face_encodings.append(face_recognition.face_encodings(image)[0])",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "image_files",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "image_files = []\n# cycle through the known_faces directory and load each image\nfor filename in os.listdir(os.path.join(images_directory, \"known_faces\")):\n\timage_files.append(filename)\nknown_face_encodings = []\n# Load the known images (create face encodings) for all image_files\nfor filename in image_files:\n\timage = face_recognition.load_image_file(os.path.join(images_directory, \"known_faces\", filename))\n\tknown_face_encodings.append(face_recognition.face_encodings(image)[0])\n# Load all images in the test directory",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "known_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "known_face_encodings = []\n# Load the known images (create face encodings) for all image_files\nfor filename in image_files:\n\timage = face_recognition.load_image_file(os.path.join(images_directory, \"known_faces\", filename))\n\tknown_face_encodings.append(face_recognition.face_encodings(image)[0])\n# Load all images in the test directory\ntest_image_files = []\nfor filename in os.listdir(testing_images_directory):\n\ttest_image_files.append(filename)\nunknown_face_encodings = {}",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "\timage",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "\timage = face_recognition.load_image_file(os.path.join(images_directory, \"known_faces\", filename))\n\tknown_face_encodings.append(face_recognition.face_encodings(image)[0])\n# Load all images in the test directory\ntest_image_files = []\nfor filename in os.listdir(testing_images_directory):\n\ttest_image_files.append(filename)\nunknown_face_encodings = {}\n# create face encodings for all test images\nfor filename in test_image_files:\n\timage = face_recognition.load_image_file(os.path.join(testing_images_directory, filename))",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "test_image_files",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "test_image_files = []\nfor filename in os.listdir(testing_images_directory):\n\ttest_image_files.append(filename)\nunknown_face_encodings = {}\n# create face encodings for all test images\nfor filename in test_image_files:\n\timage = face_recognition.load_image_file(os.path.join(testing_images_directory, filename))\n\tunknown_face_encodings[filename] = face_recognition.face_encodings(image)\nimport face_recognition\n# Load the known images (create face encodings)",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "unknown_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "unknown_face_encodings = {}\n# create face encodings for all test images\nfor filename in test_image_files:\n\timage = face_recognition.load_image_file(os.path.join(testing_images_directory, filename))\n\tunknown_face_encodings[filename] = face_recognition.face_encodings(image)\nimport face_recognition\n# Load the known images (create face encodings)\nimage_of_person_1 = face_recognition.load_image_file(\"person_1.jpg\")\nperson_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "\timage",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "\timage = face_recognition.load_image_file(os.path.join(testing_images_directory, filename))\n\tunknown_face_encodings[filename] = face_recognition.face_encodings(image)\nimport face_recognition\n# Load the known images (create face encodings)\nimage_of_person_1 = face_recognition.load_image_file(\"person_1.jpg\")\nperson_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "\tunknown_face_encodings[filename]",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "\tunknown_face_encodings[filename] = face_recognition.face_encodings(image)\nimport face_recognition\n# Load the known images (create face encodings)\nimage_of_person_1 = face_recognition.load_image_file(\"person_1.jpg\")\nperson_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "image_of_person_1",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "image_of_person_1 = face_recognition.load_image_file(\"person_1.jpg\")\nperson_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "person_1_face_encoding",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "person_1_face_encoding = face_recognition.face_encodings(image_of_person_1)[0]\nimage_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "image_of_person_2",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "image_of_person_2 = face_recognition.load_image_file(\"person_2.jpg\")\nperson_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encodings = face_recognition.face_encodings(unknown_image)",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "person_2_face_encoding",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "person_2_face_encoding = face_recognition.face_encodings(image_of_person_2)[0]\n# Create list of known face encodings\nknown_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encodings = face_recognition.face_encodings(unknown_image)\n# There might be more than one person in the photo, so we need to check each face encoding",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "known_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "known_face_encodings = [\n    person_1_face_encoding,\n    person_2_face_encoding\n]\n# Load the image we want to check\nunknown_image = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encodings = face_recognition.face_encodings(unknown_image)\n# There might be more than one person in the photo, so we need to check each face encoding\nfor unknown_face_encoding in unknown_face_encodings:\n    # Test if this unknown face encoding matches any of the known face encodings",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "unknown_image",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "unknown_image = face_recognition.load_image_file(\"unknown.jpg\")\nunknown_face_encodings = face_recognition.face_encodings(unknown_image)\n# There might be more than one person in the photo, so we need to check each face encoding\nfor unknown_face_encoding in unknown_face_encodings:\n    # Test if this unknown face encoding matches any of the known face encodings\n    results = face_recognition.compare_faces(known_face_encodings, unknown_face_encoding)\n    name = \"Unknown\"\n    if results[0]:\n        name = \"Person 1\"\n    elif results[1]:",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "unknown_face_encodings",
        "kind": 5,
        "importPath": "app.facial_recognition.test",
        "description": "app.facial_recognition.test",
        "peekOfCode": "unknown_face_encodings = face_recognition.face_encodings(unknown_image)\n# There might be more than one person in the photo, so we need to check each face encoding\nfor unknown_face_encoding in unknown_face_encodings:\n    # Test if this unknown face encoding matches any of the known face encodings\n    results = face_recognition.compare_faces(known_face_encodings, unknown_face_encoding)\n    name = \"Unknown\"\n    if results[0]:\n        name = \"Person 1\"\n    elif results[1]:\n        name = \"Person 2\"",
        "detail": "app.facial_recognition.test",
        "documentation": {}
    },
    {
        "label": "AttendanceModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AttendanceModel(BaseModel):\n    room_id: str\n    subject_id: str\n    teacher_id: str\n    panel_id: str\n    start_time: str\n    date: str\n    end_time: str\nclass AddFaceModel(BaseModel):\n    student_id: str",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddFaceModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AddFaceModel(BaseModel):\n    student_id: str\n    face_image: bytes  # the image of the face to be added. from fastapi uploads.\nclass AddFaceResponseModel(BaseModel):\n    student_id: str\n    face_image_url: str  # from the place face image is stored.\nclass AddClassPhotoModel(BaseModel):\n    room_id: str\n    date: str\n    time: str",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddFaceResponseModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AddFaceResponseModel(BaseModel):\n    student_id: str\n    face_image_url: str  # from the place face image is stored.\nclass AddClassPhotoModel(BaseModel):\n    room_id: str\n    date: str\n    time: str\n    # # date must follow the format YYYY-MM-DD HH:MM:SS\n    # @field_validator(\"date\")\n    # def date_format(cls, v):",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddClassPhotoModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AddClassPhotoModel(BaseModel):\n    room_id: str\n    date: str\n    time: str\n    # # date must follow the format YYYY-MM-DD HH:MM:SS\n    # @field_validator(\"date\")\n    # def date_format(cls, v):\n    #     v = \"%Y-%m-%d\"\n    #     try:\n    #         datetime.strptime(v, \"%Y-%m-%d\")",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "AddClassPhotoResponseModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class AddClassPhotoResponseModel(BaseModel):\n    room_id: str\n    date: str\n    time: str\n    class_photo_url: str  # from the place class photo is stored.\nclass FaceEncodingModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding: bytes\nclass FaceEncodingResponseModel(BaseModel):",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "FaceEncodingModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class FaceEncodingModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding: bytes\nclass FaceEncodingResponseModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding_url: str  # from the place encoding is stored.",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "FaceEncodingResponseModel",
        "kind": 6,
        "importPath": "app.models.ClientUploadModels",
        "description": "app.models.ClientUploadModels",
        "peekOfCode": "class FaceEncodingResponseModel(BaseModel):\n    student_id: str\n    number_of_faces: int\n    encoding_url: str  # from the place encoding is stored.",
        "detail": "app.models.ClientUploadModels",
        "documentation": {}
    },
    {
        "label": "RoomModel",
        "kind": 6,
        "importPath": "app.models.CollegeModels",
        "description": "app.models.CollegeModels",
        "peekOfCode": "class RoomModel(BaseModel):\n    name: str\n    def set_id(self, _id):\n        self._id = _id\nclass RoomResponseModel(BaseModel):\n    name: str\n    room_id: str\nclass BuildingModel(BaseModel):\n    name: str\n    rooms: Optional[List] = []",
        "detail": "app.models.CollegeModels",
        "documentation": {}
    },
    {
        "label": "RoomResponseModel",
        "kind": 6,
        "importPath": "app.models.CollegeModels",
        "description": "app.models.CollegeModels",
        "peekOfCode": "class RoomResponseModel(BaseModel):\n    name: str\n    room_id: str\nclass BuildingModel(BaseModel):\n    name: str\n    rooms: Optional[List] = []\n    def set_id(self, _id):\n        self._id = _id\nclass BuildingResponseModel(BaseModel):\n    name: str",
        "detail": "app.models.CollegeModels",
        "documentation": {}
    },
    {
        "label": "BuildingModel",
        "kind": 6,
        "importPath": "app.models.CollegeModels",
        "description": "app.models.CollegeModels",
        "peekOfCode": "class BuildingModel(BaseModel):\n    name: str\n    rooms: Optional[List] = []\n    def set_id(self, _id):\n        self._id = _id\nclass BuildingResponseModel(BaseModel):\n    name: str\n    building_id: str\n    rooms: Optional[List] = []",
        "detail": "app.models.CollegeModels",
        "documentation": {}
    },
    {
        "label": "BuildingResponseModel",
        "kind": 6,
        "importPath": "app.models.CollegeModels",
        "description": "app.models.CollegeModels",
        "peekOfCode": "class BuildingResponseModel(BaseModel):\n    name: str\n    building_id: str\n    rooms: Optional[List] = []",
        "detail": "app.models.CollegeModels",
        "documentation": {}
    },
    {
        "label": "lectureModel",
        "kind": 6,
        "importPath": "app.models.lectureModels",
        "description": "app.models.lectureModels",
        "peekOfCode": "class lectureModel(BaseModel):\n    date: str\n    start_time: str\n    end_time: str\n    subject_id: str\n    teacher_id: str\n    panel_id: str\n    semester: str\n    room_id: str\n    students_present: List[str]",
        "detail": "app.models.lectureModels",
        "documentation": {}
    },
    {
        "label": "lectureModelId",
        "kind": 6,
        "importPath": "app.models.lectureModels",
        "description": "app.models.lectureModels",
        "peekOfCode": "class lectureModelId(BaseModel):\n    lec_id : str",
        "detail": "app.models.lectureModels",
        "documentation": {}
    },
    {
        "label": "PanelModel",
        "kind": 6,
        "importPath": "app.models.PanelModels",
        "description": "app.models.PanelModels",
        "peekOfCode": "class PanelModel(BaseModel):\n    panel_letter: str\n    school: str\n    specialization: Optional[str] = \"\"\n    students: List[str]\n    semesters: List[str]\n    current_semester: str\n    def set_id(self, _id):\n        self._id = _id\nclass PanelID(BaseModel):",
        "detail": "app.models.PanelModels",
        "documentation": {}
    },
    {
        "label": "PanelID",
        "kind": 6,
        "importPath": "app.models.PanelModels",
        "description": "app.models.PanelModels",
        "peekOfCode": "class PanelID(BaseModel):\n    panel_id: str\nclass SchoolModel(BaseModel):\n    name: str\n    specializations: Optional[List[str]] = []\n    def set_id(self, _id):\n        self._id = _id\nclass SemesterModel(BaseModel):\n    semester_number: int\n    panel: str",
        "detail": "app.models.PanelModels",
        "documentation": {}
    },
    {
        "label": "SchoolModel",
        "kind": 6,
        "importPath": "app.models.PanelModels",
        "description": "app.models.PanelModels",
        "peekOfCode": "class SchoolModel(BaseModel):\n    name: str\n    specializations: Optional[List[str]] = []\n    def set_id(self, _id):\n        self._id = _id\nclass SemesterModel(BaseModel):\n    semester_number: int\n    panel: str\n    specialization: str\n    school: str",
        "detail": "app.models.PanelModels",
        "documentation": {}
    },
    {
        "label": "SemesterModel",
        "kind": 6,
        "importPath": "app.models.PanelModels",
        "description": "app.models.PanelModels",
        "peekOfCode": "class SemesterModel(BaseModel):\n    semester_number: int\n    panel: str\n    specialization: str\n    school: str\n    start_date: str\n    end_date: str\n    subjects: Optional[List[str]] = []\n    teachers: Optional[List[str]] = []\n    teacher_subjects: Optional[dict] = {}",
        "detail": "app.models.PanelModels",
        "documentation": {}
    },
    {
        "label": "SpecializationModel",
        "kind": 6,
        "importPath": "app.models.PanelModels",
        "description": "app.models.PanelModels",
        "peekOfCode": "class SpecializationModel(BaseModel):\n    name: str\n    panels: Optional[List[str]] = []\n    def set_id(self, _id):\n        self._id = _id\nclass SpecializationResponseModel(BaseModel):\n    specialization_id: str\n    name: str\n    panels: Optional[List[str]] = []",
        "detail": "app.models.PanelModels",
        "documentation": {}
    },
    {
        "label": "SpecializationResponseModel",
        "kind": 6,
        "importPath": "app.models.PanelModels",
        "description": "app.models.PanelModels",
        "peekOfCode": "class SpecializationResponseModel(BaseModel):\n    specialization_id: str\n    name: str\n    panels: Optional[List[str]] = []",
        "detail": "app.models.PanelModels",
        "documentation": {}
    },
    {
        "label": "StudentModel",
        "kind": 6,
        "importPath": "app.models.StudentModels",
        "description": "app.models.StudentModels",
        "peekOfCode": "class StudentModel(BaseModel):\n    name: str\n    prn: str\n    panel: str\n    panel_roll_no: int\n    face_encoding: Optional[str] = \"\"\n    faces: Optional[List] = []\n    # add validators to check if the panels and stuff are actually valid, cache databases if necessary to avoid multiple router calls\n    def set_id(self, _id):\n        self._id = _id",
        "detail": "app.models.StudentModels",
        "documentation": {}
    },
    {
        "label": "StudentResponseModel",
        "kind": 6,
        "importPath": "app.models.StudentModels",
        "description": "app.models.StudentModels",
        "peekOfCode": "class StudentResponseModel(BaseModel):\n    _id: str\n    name: str\n    prn: str\n    panel: str\n    panel_roll_no: Optional[int] = None\n# this is what should be called when getting an encoding for a student face.\n# used to store this encoding in firebase. The url is returned of the stored encoding, and is stored in mongodb.\nclass EncodingModel(BaseModel):\n    student_id: str",
        "detail": "app.models.StudentModels",
        "documentation": {}
    },
    {
        "label": "EncodingModel",
        "kind": 6,
        "importPath": "app.models.StudentModels",
        "description": "app.models.StudentModels",
        "peekOfCode": "class EncodingModel(BaseModel):\n    student_id: str\n    no_of_faces: int\nclass EncodingResponseModel(BaseModel):\n    _id: str\n    student_id: str\n    number_of_faces: int\n    encoding_url: str # this is the firebase url where the encoding is stored.",
        "detail": "app.models.StudentModels",
        "documentation": {}
    },
    {
        "label": "EncodingResponseModel",
        "kind": 6,
        "importPath": "app.models.StudentModels",
        "description": "app.models.StudentModels",
        "peekOfCode": "class EncodingResponseModel(BaseModel):\n    _id: str\n    student_id: str\n    number_of_faces: int\n    encoding_url: str # this is the firebase url where the encoding is stored.",
        "detail": "app.models.StudentModels",
        "documentation": {}
    },
    {
        "label": "Subject",
        "kind": 6,
        "importPath": "app.models.SubjectModels",
        "description": "app.models.SubjectModels",
        "peekOfCode": "class Subject(BaseModel):\n    name: str\n    subject_code: str",
        "detail": "app.models.SubjectModels",
        "documentation": {}
    },
    {
        "label": "TeacherModel",
        "kind": 6,
        "importPath": "app.models.TeacherModels",
        "description": "app.models.TeacherModels",
        "peekOfCode": "class TeacherModel(BaseModel):\n    name: str\n    email: str\n    subjects: List[str]\n    panels: List[str]\nclass TeacherIDModel(BaseModel):\n    teacher_id: str",
        "detail": "app.models.TeacherModels",
        "documentation": {}
    },
    {
        "label": "TeacherIDModel",
        "kind": 6,
        "importPath": "app.models.TeacherModels",
        "description": "app.models.TeacherModels",
        "peekOfCode": "class TeacherIDModel(BaseModel):\n    teacher_id: str",
        "detail": "app.models.TeacherModels",
        "documentation": {}
    },
    {
        "label": "fb_storage",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "fb_storage = AssistanceFirebase()\nrouter = APIRouter(\n    prefix=\"/upload\", tags=[\"Upload Images or Attendance Info from App/Website/Pi\"]\n)\n@router.post(\"/add_student_face_from_url\", response_model=AddFaceResponseModel)\nasync def add_student_face_from_url_route(student_id: int, face_image_url: str):\n    \"\"\"\n    Adds a face to the student's row in the student collection in the database. This is going to be one of the base faces of the student, from which the model trains.\n    :return: URL of the uploaded image.\n    \"\"\"",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.client_uploads",
        "description": "app.routers.client_uploads",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/upload\", tags=[\"Upload Images or Attendance Info from App/Website/Pi\"]\n)\n@router.post(\"/add_student_face_from_url\", response_model=AddFaceResponseModel)\nasync def add_student_face_from_url_route(student_id: int, face_image_url: str):\n    \"\"\"\n    Adds a face to the student's row in the student collection in the database. This is going to be one of the base faces of the student, from which the model trains.\n    :return: URL of the uploaded image.\n    \"\"\"\n    try:",
        "detail": "app.routers.client_uploads",
        "documentation": {}
    },
    {
        "label": "index_route",
        "kind": 2,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "def index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.get(\"/get_all_rooms\", status_code=200, summary=\"Get all rooms\")\ndef get_all_rooms_from_db_route():\n    \"\"\"\n    This route gets all the rooms from the database.\n    : return: A list of all the rooms in the database.\n    \"\"\"\n    try:\n        rooms = get_all_rooms()",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "get_all_rooms_from_db_route",
        "kind": 2,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "def get_all_rooms_from_db_route():\n    \"\"\"\n    This route gets all the rooms from the database.\n    : return: A list of all the rooms in the database.\n    \"\"\"\n    try:\n        rooms = get_all_rooms()\n        if rooms:\n            return rooms\n        else:",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "add_room_route",
        "kind": 2,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "def add_room_route(roomModel: RoomModel):\n    \"\"\"\n    This route adds a room to the database.\n    : param room: The room to be added.\n    : return: The added room.\n    \"\"\"\n    try:\n        room = add_room(roomModel)\n        if not room:\n            raise HTTPException(",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "add_building_route",
        "kind": 2,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "def add_building_route(buildingModel: BuildingModel):\n    \"\"\"\n    This route adds a building to the database.\n    : param building: The building to be added.\n    : return: The added building.\n    \"\"\"\n    try:\n        building = add_building(buildingModel)\n        print(building)\n        if not building:",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "get_all_buildings_route",
        "kind": 2,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "def get_all_buildings_route():\n    \"\"\"\n    This route gets all the buildings from the database.\n    : return: A list of all the buildings in the database.\n    \"\"\"\n    try:\n        all_buildings = get_all_buildings()\n        if all_buildings:\n            return all_buildings\n        else:",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "get_rooms_from_building_id_route",
        "kind": 2,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "def get_rooms_from_building_id_route(building_id: str):\n    \"\"\"\n    This route gets all the rooms from the database.\n    : return: A list of all the rooms in the database.\n    \"\"\"\n    try:\n        rooms = get_rooms_from_building_id(building_id)\n        if rooms:\n            return rooms\n        else:",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "add_room_to_building_route",
        "kind": 2,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "def add_room_to_building_route(room_id: str, building_id: str):\n    \"\"\"\n    This route adds a room to a building.\n    : param room_id: The room id to be added.\n    : param building_id: The building id to be added.\n    : return: The added room to the building.\n    \"\"\"\n    try:\n        add_room_to_building(room_id, building_id)\n        return True",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.college",
        "description": "app.routers.college",
        "peekOfCode": "router = APIRouter(prefix=\"/college\", tags=[\"Rooms and Buildings\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.get(\"/get_all_rooms\", status_code=200, summary=\"Get all rooms\")\ndef get_all_rooms_from_db_route():\n    \"\"\"\n    This route gets all the rooms from the database.\n    : return: A list of all the rooms in the database.\n    \"\"\"",
        "detail": "app.routers.college",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.face_rec",
        "description": "app.routers.face_rec",
        "peekOfCode": "def index():\n\ttest_obj = FaceRec()\n\t# so ideally objects of this class would receive encodings of all the students, and the class image. We would get\n\t# this from calling functions of other routes (like getting student urls, encoding urls, etc), and then we would\n\t# call the methods of this class to get the attendance. we would then return that attendance.\n\treturn \"Hello, World!\"",
        "detail": "app.routers.face_rec",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.face_rec",
        "description": "app.routers.face_rec",
        "peekOfCode": "router = APIRouter(prefix=\"/face_rec\", tags=[\"Face Recognition\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index():\n\ttest_obj = FaceRec()\n\t# so ideally objects of this class would receive encodings of all the students, and the class image. We would get\n\t# this from calling functions of other routes (like getting student urls, encoding urls, etc), and then we would\n\t# call the methods of this class to get the attendance. we would then return that attendance.\n\treturn \"Hello, World!\"",
        "detail": "app.routers.face_rec",
        "documentation": {}
    },
    {
        "label": "\ttest_obj",
        "kind": 5,
        "importPath": "app.routers.face_rec",
        "description": "app.routers.face_rec",
        "peekOfCode": "\ttest_obj = FaceRec()\n\t# so ideally objects of this class would receive encodings of all the students, and the class image. We would get\n\t# this from calling functions of other routes (like getting student urls, encoding urls, etc), and then we would\n\t# call the methods of this class to get the attendance. we would then return that attendance.\n\treturn \"Hello, World!\"",
        "detail": "app.routers.face_rec",
        "documentation": {}
    },
    {
        "label": "add_lecture_route",
        "kind": 2,
        "importPath": "app.routers.lectures",
        "description": "app.routers.lectures",
        "peekOfCode": "def add_lecture_route(lecture_details: lectureModel):\n    \"\"\"\n    Add a lecture to the database.\n    \"\"\"\n    # call the function from lecture services to add the lecture\n    lecture_response = add_lecture(lecture_details)\n    return lecture_response\n@router.get(\"/get_lecture\", status_code=200, summary=\"Get a lecture\")\ndef get_lecture_route(lecture_id: str):\n    \"\"\"",
        "detail": "app.routers.lectures",
        "documentation": {}
    },
    {
        "label": "get_lecture_route",
        "kind": 2,
        "importPath": "app.routers.lectures",
        "description": "app.routers.lectures",
        "peekOfCode": "def get_lecture_route(lecture_id: str):\n    \"\"\"\n    Get a lecture from the database.\n    \"\"\"\n    # call the function from lecture services to get the lecture\n    lecture_response = get_lecture(lecture_id)\n    return lecture_response\n@router.get(\"/get_all_lectures\", status_code=200, summary=\"Get all lectures\")\ndef get_all_lectures_route():\n    \"\"\"",
        "detail": "app.routers.lectures",
        "documentation": {}
    },
    {
        "label": "get_all_lectures_route",
        "kind": 2,
        "importPath": "app.routers.lectures",
        "description": "app.routers.lectures",
        "peekOfCode": "def get_all_lectures_route():\n    \"\"\"\n    Get all lectures from the database.\n    \"\"\"\n    # call the function from lecture services to get all the lectures\n    lecture_response = get_all_lectures()\n    return lecture_response\n@router.get(\n    \"/get_lecture_images_between_time\",\n    status_code=200,",
        "detail": "app.routers.lectures",
        "documentation": {}
    },
    {
        "label": "get_lecture_images_between_time_route",
        "kind": 2,
        "importPath": "app.routers.lectures",
        "description": "app.routers.lectures",
        "peekOfCode": "def get_lecture_images_between_time_route(start_time: str, end_time: str):\n    \"\"\"\n    Get all lecture images between a start and end time.\n    \"\"\"\n    # call the function from lecture services to get all the lecture images between the start and end time\n    lecture_response = get_lecture_images_between_time_on_date(start_time, end_time)\n    return lecture_response",
        "detail": "app.routers.lectures",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.lectures",
        "description": "app.routers.lectures",
        "peekOfCode": "router = APIRouter(prefix=\"/lectures\", tags=[\"Lectures\"])\n# import lecture service\nfrom services.lecture_services import (\n    add_lecture,\n    get_lecture,\n    get_all_lectures,\n    get_lecture_images_between_time_on_date,\n)\n@router.post(\"/add_lecture\", status_code=200, summary=\"Add a lecture\")\ndef add_lecture_route(lecture_details: lectureModel):",
        "detail": "app.routers.lectures",
        "documentation": {}
    },
    {
        "label": "index_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n# Add a panel\n@router.post(\"/add_panel\", status_code=201, summary=\"Add a panel\")\ndef add_panel_route(panel: PanelModel):\n    \"\"\"\n    This route adds a panel to the database.\n    : param panel: The panel to be added.\n    : return: The added panel.\n    \"\"\"",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "add_panel_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def add_panel_route(panel: PanelModel):\n    \"\"\"\n    This route adds a panel to the database.\n    : param panel: The panel to be added.\n    : return: The added panel.\n    \"\"\"\n    try:\n        added_panel = add_panel(panel)\n        if added_panel:\n            return added_panel",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "get_all_panels_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def get_all_panels_route():\n    \"\"\"\n    This route gets all the panels from the database.\n    : return: A list of all the panels in the database.\n    \"\"\"\n    try:\n        all_panels = get_all_panels()\n        if all_panels:\n            return all_panels\n        else:",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "add_school_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def add_school_route(school: SchoolModel):\n    \"\"\"\n    This route adds a school to the database.\n    : param school: The school to be added.\n    : return: The added school.\n    \"\"\"\n    try:\n        added_school = add_school(school)\n        if added_school:\n            return added_school",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "get_all_schools_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def get_all_schools_route():\n    \"\"\"\n    This route gets all the schools from the database.\n    : return: A list of all the schools in the database.\n    \"\"\"\n    try:\n        all_schools = get_all_schools()\n        if all_schools:\n            return all_schools\n        else:",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "add_specialization_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def add_specialization_route(specialization: SpecializationModel):\n    \"\"\"\n    This route adds a specialization to the database.\n    : param specialization: The specialization to be added.\n    : return: The added specialization.\n    \"\"\"\n    try:\n        added_specialization = add_specialization(specialization)\n        if not added_specialization:\n            raise HTTPException(",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "get_all_specializations_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def get_all_specializations_route():\n    \"\"\"\n    This route gets all the specializations from the database.\n    : return: A list of all the specializations in the database.\n    \"\"\"\n    try:\n        all_specializations = get_all_specializations()\n        if not all_specializations:\n            raise HTTPException(\n                status_code=500,",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "add_spec_to_school_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def add_spec_to_school_route(school_id: str, spec_id: str):\n    \"\"\"\n    This route adds a specialization to a school.\n    : param school_id: The school to which the specialization is to be added.\n    : param spec_id: The specialization to be added to the school.\n    : return: The updated school.\n    \"\"\"\n    try:\n        updated_school = add_spec_to_school(school_id, spec_id)\n        if updated_school:",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "update_school_for_panel_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def update_school_for_panel_route(panel_id: str, school_id: str):\n    \"\"\"\n    This route updates the school for a panel.\n    : param panel_id: The panel for which the school is to be updated.\n    : param school_id: The school to be updated for the panel.\n    : return: The updated panel.\n    \"\"\"\n    try:\n        updated_panel = update_school_for_panel(panel_id, school_id)\n        if updated_panel:",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "update_spec_for_panel_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def update_spec_for_panel_route(panel_id: str, spec_id: str):\n    \"\"\"\n    This route updates the specialization for a panel.\n    : param panel_id: The panel for which the specialization is to be updated.\n    : param spec_id: The specialization to be updated for the panel.\n    : return: The updated panel.\n    \"\"\"\n    try:\n        updated_panel = update_spec_for_panel(panel_id, spec_id)\n        if updated_panel:",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "set_current_sem_for_panel_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def set_current_sem_for_panel_route(panel_id: str, sem_id: str):\n    \"\"\"\n    This route sets the current semester for a panel.\n    : param panel_id: The panel for which the current semester is to be set.\n    : param sem_id: The semester to be set as the current semester for the panel.\n    : return: The updated panel.\n    \"\"\"\n    try:\n        updated_panel = set_current_sem_for_panel(panel_id, sem_id)\n        if updated_panel:",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "add_semester_to_panel_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def add_semester_to_panel_route(panel_id: str, sem_id: str):\n    \"\"\"\n    This route adds a semester to a panel.\n    : param panel_id: The panel to which the semester is to be added.\n    : param sem_id: The semester to be added to the panel.\n    : return: The updated panel.\n    \"\"\"\n    try:\n        updated_panel = add_semester_to_panel(panel_id, sem_id)\n        if updated_panel:",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "add_student_to_panel_route",
        "kind": 2,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "def add_student_to_panel_route(panel_id: str, student_id: str):\n    \"\"\"\n    This route adds a student to a panel.\n    : param panel_id: The panel to which the student is to be added.\n    : param student_id: The student to be added to the panel.\n    : return: The updated panel.\n    \"\"\"\n    try:\n        add_student_to_panel(panel_id, student_id)\n        return True",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.panels",
        "description": "app.routers.panels",
        "peekOfCode": "router = APIRouter(prefix=\"/panels\", tags=[\"Panels, Schools and Specializations\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n# Add a panel\n@router.post(\"/add_panel\", status_code=201, summary=\"Add a panel\")\ndef add_panel_route(panel: PanelModel):\n    \"\"\"\n    This route adds a panel to the database.\n    : param panel: The panel to be added.",
        "detail": "app.routers.panels",
        "documentation": {}
    },
    {
        "label": "index_route",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.post(\n    \"/add_student\",\n    status_code=200,\n    summary=\"Add a student\",\n    response_model=StudentResponseModel,\n)\ndef add_student_route(student: StudentModel):\n    # add the student to the database",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "add_student_route",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def add_student_route(student: StudentModel):\n    # add the student to the database\n    try:\n        # instantiate the mongo service\n        # call the function from mongo service to add the student\n        student_response = add_student(student)\n        print(student_response)\n        return StudentResponseModel(\n            _id=student_response._id,\n            name=student_response.name,",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "get_students_from_panel_id_route",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def get_students_from_panel_id_route(panel_id: PanelID):\n    try:\n        # instantiate the mongo service\n        # call the mongo function to get the student from panel\n        students = get_student_by_panel_id(panel_id.panel_id)\n        return students\n    except PyMongoError as e:\n        raise HTTPException(status_code=500, detail=str(e))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "get_student_encoding_route",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def get_student_encoding_route(student_encoding_model: EncodingModel):\n    # get student_id\n    student_id = student_encoding_model.student_id\n    try:\n        # call the function from mongo service to get the student encoding\n        student_encoding = get_student_encoding_from_student_id(student_id)\n        print(student_encoding)\n        encoding_response_model = EncodingResponseModel(\n            student_id=student_id,\n            number_of_faces=student_encoding[\"number_of_faces\"],",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "get_all_students_route",
        "kind": 2,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "def get_all_students_route():\n    try:\n        # call the function from mongo service to get all students\n        students = get_all_students()\n        return students\n    except PyMongoError as e:\n        raise HTTPException(status_code=503, detail=str(e))\n    except Exception as e:\n        raise HTTPException(status_code=500, detail=str(e))",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.students",
        "description": "app.routers.students",
        "peekOfCode": "router = APIRouter(prefix=\"/student\", tags=[\"Students\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.post(\n    \"/add_student\",\n    status_code=200,\n    summary=\"Add a student\",\n    response_model=StudentResponseModel,\n)",
        "detail": "app.routers.students",
        "documentation": {}
    },
    {
        "label": "index_route",
        "kind": 2,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "def index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.post(\"/add_subject\", status_code=201, summary=\"Add a subject\")\ndef add_subject_route(subject: Subject):\n    \"\"\"\n    This route adds a subject to the database.\n    : param subject: The subject to be added.\n    : return: The added subject.\n    \"\"\"\n    try:",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "add_subject_route",
        "kind": 2,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "def add_subject_route(subject: Subject):\n    \"\"\"\n    This route adds a subject to the database.\n    : param subject: The subject to be added.\n    : return: The added subject.\n    \"\"\"\n    try:\n        added_subject = add_subject(subject)\n        if added_subject:\n            return added_subject",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "get_all_subjects_route",
        "kind": 2,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "def get_all_subjects_route():\n    \"\"\"\n    This route gets all the subjects from the database.\n    : return: A list of all the subjects in the database.\n    \"\"\"\n    try:\n        all_subjects = get_all_subjects()\n        if all_subjects:\n            return all_subjects\n        else:",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "add_semester_route",
        "kind": 2,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "def add_semester_route(semester: SemesterModel):\n    \"\"\"\n    This route adds a semester to the database.\n    : param semester: The semester to be added.\n    : return: The added semester.\n    \"\"\"\n    try:\n        added_semester = add_semester(semester)\n        if added_semester:\n            return added_semester",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "get_all_semesters_route",
        "kind": 2,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "def get_all_semesters_route():\n    \"\"\"\n    This route gets all the semesters from the database.\n    : return: A list of all the semesters in the database.\n    \"\"\"\n    try:\n        all_semesters = get_all_semesters()\n        if all_semesters:\n            return all_semesters\n        else:",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.subjects",
        "description": "app.routers.subjects",
        "peekOfCode": "router = APIRouter(prefix=\"/subjects\", tags=[\"Subjects and Semesters\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n@router.post(\"/add_subject\", status_code=201, summary=\"Add a subject\")\ndef add_subject_route(subject: Subject):\n    \"\"\"\n    This route adds a subject to the database.\n    : param subject: The subject to be added.\n    : return: The added subject.",
        "detail": "app.routers.subjects",
        "documentation": {}
    },
    {
        "label": "index_route",
        "kind": 2,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "def index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n# Add a teacher\n@router.post(\"/add_teacher\", status_code=201, summary=\"Add a teacher\")\ndef add_teacher_route(teacher: TeacherModel):\n    try:\n        added_teacher = add_teacher(teacher)\n        if added_teacher:\n            return added_teacher\n        else:",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "add_teacher_route",
        "kind": 2,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "def add_teacher_route(teacher: TeacherModel):\n    try:\n        added_teacher = add_teacher(teacher)\n        if added_teacher:\n            return added_teacher\n        else:\n            raise HTTPException(\n                status_code=500, detail=\"An error occurred while adding the teacher\"\n            )\n    except PyMongoError as e:",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "get_all_teachers_route",
        "kind": 2,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "def get_all_teachers_route():\n    try:\n        all_teachers = get_all_teachers()\n        if all_teachers:\n            return all_teachers\n        else:\n            raise HTTPException(\n                status_code=500, detail=\"An error occurred while getting all teachers\"\n            )\n    except PyMongoError as e:",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "get_teacher_by_id_route",
        "kind": 2,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "def get_teacher_by_id_route(teacher_in_db_model: TeacherIDModel):\n    try:\n        teacher = get_teacher_by_id(teacher_in_db_model.teacher_id)\n        if teacher:\n            return teacher.to_dict()\n        else:\n            raise HTTPException(\n                status_code=500, detail=\"An error occurred while getting the teacher\"\n            )\n    except PyMongoError as e:",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.teachers",
        "description": "app.routers.teachers",
        "peekOfCode": "router = APIRouter(prefix=\"/teachers\", tags=[\"Teachers\"])\n@router.get(\"/test\", status_code=200, summary=\"Test route\")\ndef index_route():\n    return Response(content=\"Hello, World!\", status_code=200)\n# Add a teacher\n@router.post(\"/add_teacher\", status_code=201, summary=\"Add a teacher\")\ndef add_teacher_route(teacher: TeacherModel):\n    try:\n        added_teacher = add_teacher(teacher)\n        if added_teacher:",
        "detail": "app.routers.teachers",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app.routers.test_route",
        "description": "app.routers.test_route",
        "peekOfCode": "def index():\n\treturn Response(status_code=200, content=\"Hello, World!\")",
        "detail": "app.routers.test_route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.test_route",
        "description": "app.routers.test_route",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/test\", status_code=status.HTTP_200_OK, tags=[\"test\"], summary=\"Test route\")\ndef index():\n\treturn Response(status_code=200, content=\"Hello, World!\")",
        "detail": "app.routers.test_route",
        "documentation": {}
    },
    {
        "label": "AssistanceFirebase",
        "kind": 6,
        "importPath": "app.services.assistanceFirebase",
        "description": "app.services.assistanceFirebase",
        "peekOfCode": "class AssistanceFirebase:\n    def __init__(self):\n        self.storage = firebaseStorage.fb_storage\n    def upload_image(self, image):\n        bucket = self.storage\n        unique_name = str(uuid.uuid4())\n        blob = bucket.blob(unique_name + \".jpg\")\n        image_stream = BytesIO(image)\n        blob.upload_from_file(image_stream)\n        blob.make_public()",
        "detail": "app.services.assistanceFirebase",
        "documentation": {}
    },
    {
        "label": "add_class_photo_to_db",
        "kind": 2,
        "importPath": "app.services.lecture_services",
        "description": "app.services.lecture_services",
        "peekOfCode": "def add_class_photo_to_db(room_id, date, time, class_photo_url):\n    try:\n        db[\"lectureImages\"].insert_one(\n            {\n                \"room_id\": room_id,\n                \"date\": date,\n                \"time\": time,\n                \"class_photo_url\": class_photo_url,\n            }\n        )",
        "detail": "app.services.lecture_services",
        "documentation": {}
    },
    {
        "label": "get_all_class_photos",
        "kind": 2,
        "importPath": "app.services.lecture_services",
        "description": "app.services.lecture_services",
        "peekOfCode": "def get_all_class_photos():\n    try:\n        class_photos = db[\"lectureImages\"].find()\n        return [\n            {\n                \"_id\": str(class_photo[\"_id\"]),\n                **{key: value for key, value in class_photo.items() if key != \"_id\"},\n            }\n            for class_photo in class_photos\n        ]",
        "detail": "app.services.lecture_services",
        "documentation": {}
    },
    {
        "label": "add_lecture",
        "kind": 2,
        "importPath": "app.services.lecture_services",
        "description": "app.services.lecture_services",
        "peekOfCode": "def add_lecture(lecture):\n    try:\n        mongo_output = db[\"classes\"].insert_one(lecture.dict())\n        lecture.set_id(str(mongo_output.inserted_id))\n        return lecture\n    except Exception as e:\n        print(f\"An error occurred while adding the lecture: {e}\")\n        return None\ndef get_lecture(lecture_id):\n    try:",
        "detail": "app.services.lecture_services",
        "documentation": {}
    },
    {
        "label": "get_lecture",
        "kind": 2,
        "importPath": "app.services.lecture_services",
        "description": "app.services.lecture_services",
        "peekOfCode": "def get_lecture(lecture_id):\n    try:\n        lecture = db[\"classes\"].find_one({\"_id\": ObjectId(lecture_id)})\n        return {\n            \"_id\": str(lecture[\"_id\"]),\n            **{key: value for key, value in lecture.items() if key != \"_id\"},\n        }\n    except Exception as e:\n        print(f\"An error occurred while getting the lecture: {e}\")\n        return None",
        "detail": "app.services.lecture_services",
        "documentation": {}
    },
    {
        "label": "get_all_lectures",
        "kind": 2,
        "importPath": "app.services.lecture_services",
        "description": "app.services.lecture_services",
        "peekOfCode": "def get_all_lectures():\n    try:\n        lectures = db[\"classes\"].find()\n        return [\n            {\n                \"_id\": str(lecture[\"_id\"]),\n                **{key: value for key, value in lecture.items() if key != \"_id\"},\n            }\n            for lecture in lectures\n        ]",
        "detail": "app.services.lecture_services",
        "documentation": {}
    },
    {
        "label": "get_lecture_images_between_time_on_date",
        "kind": 2,
        "importPath": "app.services.lecture_services",
        "description": "app.services.lecture_services",
        "peekOfCode": "def get_lecture_images_between_time_on_date(start_time, end_time, given_date):\n    try:\n        lecture_images = db[\"lectureImages\"].find(\n            {\n                \"time\": {\"$gte\": start_time, \"$lte\": end_time},\n                \"date\": given_date,\n            }\n        )\n        return [\n            {",
        "detail": "app.services.lecture_services",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.services.lecture_services",
        "description": "app.services.lecture_services",
        "peekOfCode": "db = connect_to_mongo()\ndef add_class_photo_to_db(room_id, date, time, class_photo_url):\n    try:\n        db[\"lectureImages\"].insert_one(\n            {\n                \"room_id\": room_id,\n                \"date\": date,\n                \"time\": time,\n                \"class_photo_url\": class_photo_url,\n            }",
        "detail": "app.services.lecture_services",
        "documentation": {}
    },
    {
        "label": "get_student_encodings_from_panel_id",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def get_student_encodings_from_panel_id(panel_id):\n    \"\"\"\n    Get all student encodings from a panel id.\n    \"\"\"\n    # get all the student encodings from a panel id\n    try:\n        # get all students in a panel.\n        student_ids = get_student_ids_from_panel_id(panel_id)\n        print(student_ids, \"are the students that are present in the panel \", panel_id)\n        student_encodings, student_faces, no_faces = (",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_panel",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def add_panel(panel):\n    try:\n        db[\"panels\"].insert_one(panel.dict())\n        return panel\n    except Exception as e:\n        print(f\"An error occurred while inserting the panel: {e}\")\n        return None\ndef get_all_panels():\n    try:\n        panels = db[\"panels\"].find()",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_all_panels",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def get_all_panels():\n    try:\n        panels = db[\"panels\"].find()\n        panels = [\n            {\n                \"_id\": str(panel[\"_id\"]),\n                **{key: value for key, value in panel.items() if key != \"_id\"},\n            }\n            for panel in panels\n        ]",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_student_by_panel_id",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def get_student_by_panel_id(panel_id):\n    try:\n        student_ids_from_panel = db[\"panels\"].find_one({\"_id\": ObjectId(panel_id)})[\n            \"students\"\n        ]\n        # get the student row from the students collection using the ids we retrieved\n        students = {}\n        for student_id in student_ids_from_panel:\n            student = db[\"students\"].find_one({\"_id\": ObjectId(student_id)})\n            if student:",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_panel",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def add_panel(panel):\n    try:\n        mongo_output = db[\"panels\"].insert_one(panel.dict())\n        panel.set_id(str(mongo_output.inserted_id))\n        return panel\n    except Exception as e:\n        print(f\"An error occurred while inserting the panel: {e}\")\n        return None\ndef set_current_sem_for_panel(panel_id, sem_id):\n    try:",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "set_current_sem_for_panel",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def set_current_sem_for_panel(panel_id, sem_id):\n    try:\n        db[\"panels\"].update_one(\n            {\"_id\": ObjectId(panel_id)}, {\"$set\": {\"current_sem\": ObjectId(sem_id)}}\n        )\n    except Exception as e:\n        print(\n            f\"An error occurred while setting the current semester for the panel: {e}\"\n        )\ndef get_current_sem_from_panel(panel_id):",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_current_sem_from_panel",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def get_current_sem_from_panel(panel_id):\n    try:\n        current_sem = db[\"panels\"].find_one({\"_id\": ObjectId(panel_id)})[\n            \"current_semester\"\n        ]\n        return current_sem\n    except Exception as e:\n        print(f\"An error occurred while getting the current semester: {e}\")\n        return None\ndef add_semester_to_panel(panel_id, sem_id):",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_semester_to_panel",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def add_semester_to_panel(panel_id, sem_id):\n    try:\n        db[\"panels\"].update_one(\n            {\"_id\": ObjectId(panel_id)}, {\"$push\": {\"semesters\": ObjectId(sem_id)}}\n        )\n    except Exception as e:\n        print(f\"An error occurred while adding the semester to the panel: {e}\")\ndef add_semester(semester):\n    try:\n        mongo_output = db[\"semesters\"].insert_one(semester.dict())",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_semester",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def add_semester(semester):\n    try:\n        mongo_output = db[\"semesters\"].insert_one(semester.dict())\n        semester.set_id(str(mongo_output.inserted_id))\n        return semester\n    except Exception as e:\n        print(f\"An error occurred while inserting the semester: {e}\")\n        return None\ndef add_student_to_panel(panel_id, student_id):\n    try:",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "add_student_to_panel",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def add_student_to_panel(panel_id, student_id):\n    try:\n        db[\"panels\"].update_one(\n            {\"_id\": ObjectId(panel_id)}, {\"$push\": {\"students\": student_id}}\n        )\n    except PyMongoError as e:\n        print(e)\n        print(f\"An error occurred while adding the student to the panel: {e}\")\n        return False\n    return True",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_all_semesters",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def get_all_semesters():\n    try:\n        semesters = db[\"semesters\"].find()\n        return [\n            {\n                \"_id\": str(semester[\"_id\"]),\n                **{key: value for key, value in semester.items() if key != \"_id\"},\n            }\n            for semester in semesters\n        ]",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_student_ids_from_panel_id",
        "kind": 2,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "def get_student_ids_from_panel_id(panel_id):\n    try:\n        student_ids = db[\"panels\"].find_one({\"_id\": ObjectId(panel_id)})[\"students\"]\n        return student_ids\n    except Exception as e:\n        print(f\"An error occurred while getting the student ids: {e}\")\n        return None",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.services.panel_services",
        "description": "app.services.panel_services",
        "peekOfCode": "db = connect_to_mongo()\nimport services.panel_services\nfrom services.student_services import (\n    get_student_encodings_from_student_ids,\n)\ndef get_student_encodings_from_panel_id(panel_id):\n    \"\"\"\n    Get all student encodings from a panel id.\n    \"\"\"\n    # get all the student encodings from a panel id",
        "detail": "app.services.panel_services",
        "documentation": {}
    },
    {
        "label": "get_all_rooms",
        "kind": 2,
        "importPath": "app.services.room_services",
        "description": "app.services.room_services",
        "peekOfCode": "def get_all_rooms():\n    try:\n        rooms = db[\"rooms\"].find()\n        return [\n            {\n                \"_id\": str(room[\"_id\"]),\n                **{key: value for key, value in room.items() if key != \"_id\"},\n            }\n            for room in rooms\n        ]",
        "detail": "app.services.room_services",
        "documentation": {}
    },
    {
        "label": "add_room",
        "kind": 2,
        "importPath": "app.services.room_services",
        "description": "app.services.room_services",
        "peekOfCode": "def add_room(room):\n    try:\n        mongo_output = db[\"rooms\"].insert_one(room.dict())\n        room.set_id(str(mongo_output.inserted_id))\n        return room\n    except Exception as e:\n        print(f\"An error occurred while inserting the room: {e}\")\n        return None\ndef add_building(building):\n    try:",
        "detail": "app.services.room_services",
        "documentation": {}
    },
    {
        "label": "add_building",
        "kind": 2,
        "importPath": "app.services.room_services",
        "description": "app.services.room_services",
        "peekOfCode": "def add_building(building):\n    try:\n        mongo_output = db[\"buildings\"].insert_one(building.dict())\n        building.set_id(str(mongo_output.inserted_id))\n        return building\n    except Exception as e:\n        print(f\"An error occurred while inserting the building: {e}\")\n        return None\ndef get_all_buildings():\n    try:",
        "detail": "app.services.room_services",
        "documentation": {}
    },
    {
        "label": "get_all_buildings",
        "kind": 2,
        "importPath": "app.services.room_services",
        "description": "app.services.room_services",
        "peekOfCode": "def get_all_buildings():\n    try:\n        buildings = db[\"buildings\"].find()\n        return [\n            {\n                \"_id\": str(building[\"_id\"]),\n                **{key: value for key, value in building.items() if key != \"_id\"},\n            }\n            for building in buildings\n        ]",
        "detail": "app.services.room_services",
        "documentation": {}
    },
    {
        "label": "get_rooms_from_building_id",
        "kind": 2,
        "importPath": "app.services.room_services",
        "description": "app.services.room_services",
        "peekOfCode": "def get_rooms_from_building_id(building_id):\n    try:\n        rooms = db[\"rooms\"].find({\"building_id\": ObjectId(building_id)})\n        return [\n            {\n                \"_id\": str(room[\"_id\"]),\n                **{key: value for key, value in room.items() if key != \"_id\"},\n            }\n            for room in rooms\n        ]",
        "detail": "app.services.room_services",
        "documentation": {}
    },
    {
        "label": "add_room_to_building",
        "kind": 2,
        "importPath": "app.services.room_services",
        "description": "app.services.room_services",
        "peekOfCode": "def add_room_to_building(room_id, building_id):\n    try:\n        db[\"buildings\"].update_one(\n            {\"_id\": ObjectId(building_id)}, {\"$push\": {\"rooms\": room_id}}\n        )\n    except Exception as e:\n        print(f\"An error occurred while adding the room to the building: {e}\")",
        "detail": "app.services.room_services",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.services.room_services",
        "description": "app.services.room_services",
        "peekOfCode": "db = connect_to_mongo()\ndef get_all_rooms():\n    try:\n        rooms = db[\"rooms\"].find()\n        return [\n            {\n                \"_id\": str(room[\"_id\"]),\n                **{key: value for key, value in room.items() if key != \"_id\"},\n            }\n            for room in rooms",
        "detail": "app.services.room_services",
        "documentation": {}
    },
    {
        "label": "add_school",
        "kind": 2,
        "importPath": "app.services.school_and_spec_services",
        "description": "app.services.school_and_spec_services",
        "peekOfCode": "def add_school(school):\n    try:\n        mongo_output = db[\"schools\"].insert_one(school.dict())\n        school.set_id(str(mongo_output.inserted_id))\n        return school\n    except Exception as e:\n        print(f\"An error occurred while inserting the school: {e}\")\n        return None\ndef get_all_schools():\n    try:",
        "detail": "app.services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "get_all_schools",
        "kind": 2,
        "importPath": "app.services.school_and_spec_services",
        "description": "app.services.school_and_spec_services",
        "peekOfCode": "def get_all_schools():\n    try:\n        schools = db[\"schools\"].find()\n        return [\n            {\n                \"_id\": str(school[\"_id\"]),\n                **{key: value for key, value in school.items() if key != \"_id\"},\n            }\n            for school in schools\n        ]",
        "detail": "app.services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "add_specialization",
        "kind": 2,
        "importPath": "app.services.school_and_spec_services",
        "description": "app.services.school_and_spec_services",
        "peekOfCode": "def add_specialization(specialization):\n    try:\n        mongo_output = db[\"specializations\"].insert_one(specialization.dict())\n        specialization.set_id(str(mongo_output.inserted_id))\n        return specialization\n    except Exception as e:\n        print(f\"An error occurred while inserting the specialization: {e}\")\n        return None\ndef get_all_specializations():\n    try:",
        "detail": "app.services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "get_all_specializations",
        "kind": 2,
        "importPath": "app.services.school_and_spec_services",
        "description": "app.services.school_and_spec_services",
        "peekOfCode": "def get_all_specializations():\n    try:\n        specializations = db[\"specializations\"].find()\n        return [\n            {\n                \"_id\": str(specialization[\"_id\"]),\n                **{key: value for key, value in specialization.items() if key != \"_id\"},\n            }\n            for specialization in specializations\n        ]",
        "detail": "app.services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "add_spec_to_school",
        "kind": 2,
        "importPath": "app.services.school_and_spec_services",
        "description": "app.services.school_and_spec_services",
        "peekOfCode": "def add_spec_to_school(school_id, spec_id):\n    try:\n        db[\"schools\"].update_one(\n            {\"_id\": ObjectId(school_id)},\n            {\"$push\": {\"specializations\": ObjectId(spec_id)}},\n        )\n    except Exception as e:\n        print(f\"An error occurred while adding the specialization to the school: {e}\")\ndef update_school_for_panel(panel_id, school_id):\n    try:",
        "detail": "app.services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "update_school_for_panel",
        "kind": 2,
        "importPath": "app.services.school_and_spec_services",
        "description": "app.services.school_and_spec_services",
        "peekOfCode": "def update_school_for_panel(panel_id, school_id):\n    try:\n        db[\"panels\"].update_one(\n            {\"_id\": ObjectId(panel_id)},\n            {\"$set\": {\"school_id\": ObjectId(school_id)}},\n        )\n    except Exception as e:\n        print(f\"An error occurred while updating the school for the panel: {e}\")\ndef update_spec_for_panel(panel_id, spec_id):\n    try:",
        "detail": "app.services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "update_spec_for_panel",
        "kind": 2,
        "importPath": "app.services.school_and_spec_services",
        "description": "app.services.school_and_spec_services",
        "peekOfCode": "def update_spec_for_panel(panel_id, spec_id):\n    try:\n        db[\"panels\"].update_one(\n            {\"_id\": ObjectId(panel_id)}, {\"$set\": {\"spec_id\": ObjectId(spec_id)}}\n        )\n    except Exception as e:\n        print(f\"An error occurred while updating the specialization for the panel: {e}\")",
        "detail": "app.services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.services.school_and_spec_services",
        "description": "app.services.school_and_spec_services",
        "peekOfCode": "db = connect_to_mongo()\ndef add_school(school):\n    try:\n        mongo_output = db[\"schools\"].insert_one(school.dict())\n        school.set_id(str(mongo_output.inserted_id))\n        return school\n    except Exception as e:\n        print(f\"An error occurred while inserting the school: {e}\")\n        return None\ndef get_all_schools():",
        "detail": "app.services.school_and_spec_services",
        "documentation": {}
    },
    {
        "label": "get_student_encoding_from_student_id",
        "kind": 2,
        "importPath": "app.services.student_services",
        "description": "app.services.student_services",
        "peekOfCode": "def get_student_encoding_from_student_id(student_id):\n    \"\"\"Gets the student encoding dictionary that is stored in mongodb.\n    Args:\n        student_id (string): the id of the student that we want the encoding from.\n    Returns:\n        dictionary: the encoding of the student.\n    \"\"\"\n    try:\n        # getting the student encoding id from students collection\n        student = db[\"students\"].find_one({\"_id\": ObjectId(student_id)})",
        "detail": "app.services.student_services",
        "documentation": {}
    },
    {
        "label": "add_student_face_to_db",
        "kind": 2,
        "importPath": "app.services.student_services",
        "description": "app.services.student_services",
        "peekOfCode": "def add_student_face_to_db(student_id, face_url):\n    \"\"\"Adds the face url to the faces list of the student row matching with id = student_id.\n    Args:\n        student_id (str): id of the student that you wanna add the face of.\n        face_url (str): url of the firebase storage of the image containing the face of the concerned student.\n    \"\"\"\n    try:\n        db[\"students\"].update_one(\n            {\"_id\": ObjectId(student_id)}, {\"$push\": {\"faces\": face_url}}\n        )",
        "detail": "app.services.student_services",
        "documentation": {}
    },
    {
        "label": "get_all_students",
        "kind": 2,
        "importPath": "app.services.student_services",
        "description": "app.services.student_services",
        "peekOfCode": "def get_all_students():\n    try:\n        students = db[\"students\"].find()\n        return [\n            {\n                \"_id\": str(student[\"_id\"]),\n                **{key: value for key, value in student.items() if key != \"_id\"},\n            }\n            for student in students\n        ]",
        "detail": "app.services.student_services",
        "documentation": {}
    },
    {
        "label": "add_student",
        "kind": 2,
        "importPath": "app.services.student_services",
        "description": "app.services.student_services",
        "peekOfCode": "def add_student(student):\n    try:\n        mongo_output = db[\"students\"].insert_one(student.dict())\n        student.set_id(str(mongo_output.inserted_id))\n        return student\n    except Exception as e:\n        print(f\"An error occurred while inserting the student: {e}\")\n        return None\ndef add_student_encoding(student_id, number_of_faces, encoding):\n    \"\"\"uploads the student encoding, and puts it in the students collection as well as the encoding collection. ",
        "detail": "app.services.student_services",
        "documentation": {}
    },
    {
        "label": "add_student_encoding",
        "kind": 2,
        "importPath": "app.services.student_services",
        "description": "app.services.student_services",
        "peekOfCode": "def add_student_encoding(student_id, number_of_faces, encoding):\n    \"\"\"uploads the student encoding, and puts it in the students collection as well as the encoding collection. \n    Args:\n        student_id (str): id of the student whose encoding is to be added.\n        encoding (pkl): pkl serialized object. \n    Returns:\n        True if done well, else False\n    \"\"\"\n    # add encoding to firebase. \n    assist_firebase = AssistanceFirebase()",
        "detail": "app.services.student_services",
        "documentation": {}
    },
    {
        "label": "get_student_encodings_from_student_ids",
        "kind": 2,
        "importPath": "app.services.student_services",
        "description": "app.services.student_services",
        "peekOfCode": "def get_student_encodings_from_student_ids(student_ids):\n    \"\"\"\n    Get all student encodings from the panel id.\n    :param panel_id: The panel id.\n    :return: The student encodings.\n    \"\"\"\n    try:\n        print(\"trying to get student encodings\")\n        student_encodings = {}\n        no_faces = []",
        "detail": "app.services.student_services",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.services.student_services",
        "description": "app.services.student_services",
        "peekOfCode": "db = connect_to_mongo()\ndef get_student_encoding_from_student_id(student_id):\n    \"\"\"Gets the student encoding dictionary that is stored in mongodb.\n    Args:\n        student_id (string): the id of the student that we want the encoding from.\n    Returns:\n        dictionary: the encoding of the student.\n    \"\"\"\n    try:\n        # getting the student encoding id from students collection",
        "detail": "app.services.student_services",
        "documentation": {}
    },
    {
        "label": "add_teacher",
        "kind": 2,
        "importPath": "app.services.teacher_and_subject_services",
        "description": "app.services.teacher_and_subject_services",
        "peekOfCode": "def add_teacher(teacher):\n    try:\n        db[\"teachers\"].insert_one(teacher.dict())\n        return teacher\n    except Exception as e:\n        print(f\"An error occurred while inserting the teacher: {e}\")\n        return None\ndef add_subject(subject):\n    try:\n        db[\"subjects\"].insert_one(subject.dict())",
        "detail": "app.services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "add_subject",
        "kind": 2,
        "importPath": "app.services.teacher_and_subject_services",
        "description": "app.services.teacher_and_subject_services",
        "peekOfCode": "def add_subject(subject):\n    try:\n        db[\"subjects\"].insert_one(subject.dict())\n        return subject\n    except Exception as e:\n        print(f\"An error occurred while inserting the subject: {e}\")\n        return None\ndef get_all_teachers(self):\n    try:\n        teachers = db[\"teachers\"].find()",
        "detail": "app.services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "get_all_teachers",
        "kind": 2,
        "importPath": "app.services.teacher_and_subject_services",
        "description": "app.services.teacher_and_subject_services",
        "peekOfCode": "def get_all_teachers(self):\n    try:\n        teachers = db[\"teachers\"].find()\n        return [\n            {\n                \"_id\": str(teacher[\"_id\"]),\n                **{key: value for key, value in teacher.items() if key != \"_id\"},\n            }\n            for teacher in teachers\n        ]",
        "detail": "app.services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "get_all_subjects",
        "kind": 2,
        "importPath": "app.services.teacher_and_subject_services",
        "description": "app.services.teacher_and_subject_services",
        "peekOfCode": "def get_all_subjects(self):\n    try:\n        subjects = db[\"subjects\"].find()\n        return [\n            {\n                \"_id\": str(subject[\"_id\"]),\n                **{key: value for key, value in subject.items() if key != \"_id\"},\n            }\n            for subject in subjects\n        ]",
        "detail": "app.services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "add_panel",
        "kind": 2,
        "importPath": "app.services.teacher_and_subject_services",
        "description": "app.services.teacher_and_subject_services",
        "peekOfCode": "def add_panel(panel):\n    try:\n        db[\"panels\"].insert_one(panel.dict())\n        return panel\n    except Exception as e:\n        print(f\"An error occurred while inserting the panel: {e}\")\n        return None\ndef get_all_panels(self):\n    try:\n        panels = db[\"panels\"].find()",
        "detail": "app.services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "get_all_panels",
        "kind": 2,
        "importPath": "app.services.teacher_and_subject_services",
        "description": "app.services.teacher_and_subject_services",
        "peekOfCode": "def get_all_panels(self):\n    try:\n        panels = db[\"panels\"].find()\n        panels = [\n            {\n                \"_id\": str(panel[\"_id\"]),\n                **{key: value for key, value in panel.items() if key != \"_id\"},\n            }\n            for panel in panels\n        ]",
        "detail": "app.services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "get_teacher_by_id",
        "kind": 2,
        "importPath": "app.services.teacher_and_subject_services",
        "description": "app.services.teacher_and_subject_services",
        "peekOfCode": "def get_teacher_by_id(teacher_id):\n    try:\n        teacher = db[\"teachers\"].find_one({\"_id\": ObjectId(teacher_id)})\n        if teacher:\n            return {\n                \"_id\": str(teacher[\"_id\"]),\n                **{key: value for key, value in teacher.items() if key != \"_id\"},\n            }\n        else:\n            return None",
        "detail": "app.services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app.services.teacher_and_subject_services",
        "description": "app.services.teacher_and_subject_services",
        "peekOfCode": "db = connect_to_mongo()\ndef add_teacher(teacher):\n    try:\n        db[\"teachers\"].insert_one(teacher.dict())\n        return teacher\n    except Exception as e:\n        print(f\"An error occurred while inserting the teacher: {e}\")\n        return None\ndef add_subject(subject):\n    try:",
        "detail": "app.services.teacher_and_subject_services",
        "documentation": {}
    },
    {
        "label": "mongodb_uri",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "mongodb_uri = os.getenv(\"MONGODB_URI\")\napiKey = os.getenv(\"apiKey\")\nauthDomain = os.getenv(\"authDomain\") \nprojectId = os.getenv(\"projectId\")\nstorageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "apiKey",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "apiKey = os.getenv(\"apiKey\")\nauthDomain = os.getenv(\"authDomain\") \nprojectId = os.getenv(\"projectId\")\nstorageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "authDomain",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "authDomain = os.getenv(\"authDomain\") \nprojectId = os.getenv(\"projectId\")\nstorageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "projectId",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "projectId = os.getenv(\"projectId\")\nstorageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "storageBucket",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "storageBucket = os.getenv(\"storageBucket\")\nmessagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "messagingSenderId",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "messagingSenderId = os.getenv(\"messagingSenderId\") \nappId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "appId",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "appId = os.getenv(\"appId\")\nmeasurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "measurementId",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "measurementId = os.getenv(\"measurementId\")\nport = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "port = os.getenv(\"PORT\")",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\n# Include routers here\nfrom routers import client_uploads, test_route, face_rec, college, subjects, students, teachers, panels, lectures\napp.include_router(client_uploads.router)\napp.include_router(students.router)\napp.include_router(face_rec.router)\napp.include_router(panels.router)\napp.include_router(college.router)\napp.include_router(subjects.router)\napp.include_router(teachers.router)",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.activate_this",
        "description": "AttenEnv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "AttenEnv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "firestore_adminCallTransformer",
        "kind": 6,
        "importPath": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "class firestore_adminCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'create_database': ('parent', 'database', 'database_id', ),\n        'create_index': ('parent', 'index', ),\n        'delete_database': ('name', 'etag', ),\n        'delete_index': ('name', ),\n        'export_documents': ('name', 'collection_ids', 'output_uri_prefix', 'namespace_ids', 'snapshot_time', ),\n        'get_database': ('name', ),\n        'get_field': ('name', ),",
        "detail": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestore_adminCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "AttenEnv.Scripts.fixup_firestore_admin_v1_keywords",
        "documentation": {}
    },
    {
        "label": "firestoreCallTransformer",
        "kind": 6,
        "importPath": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "class firestoreCallTransformer(cst.CSTTransformer):\n    CTRL_PARAMS: Tuple[str] = ('retry', 'timeout', 'metadata')\n    METHOD_TO_PARAMS: Dict[str, Tuple[str]] = {\n        'batch_get_documents': ('database', 'documents', 'mask', 'transaction', 'new_transaction', 'read_time', ),\n        'batch_write': ('database', 'writes', 'labels', ),\n        'begin_transaction': ('database', 'options', ),\n        'commit': ('database', 'writes', 'transaction', ),\n        'create_document': ('parent', 'collection_id', 'document', 'document_id', 'mask', ),\n        'delete_document': ('name', 'current_document', ),\n        'get_document': ('name', 'mask', 'transaction', 'read_time', ),",
        "detail": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "partition",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "def partition(\n    predicate: Callable[[Any], bool],\n    iterator: Sequence[Any]\n) -> Tuple[List[Any], List[Any]]:\n    \"\"\"A stable, out-of-place partition.\"\"\"\n    results = ([], [])\n    for i in iterator:\n        results[int(predicate(i))].append(i)\n    # Returns trueList, falseList\n    return results[1], results[0]",
        "detail": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "fix_files",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "description": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "peekOfCode": "def fix_files(\n    in_dir: pathlib.Path,\n    out_dir: pathlib.Path,\n    *,\n    transformer=firestoreCallTransformer(),\n):\n    \"\"\"Duplicate the input dir to the output dir, fixing file method calls.\n    Preconditions:\n    * in_dir is a real directory\n    * out_dir is a real, empty directory",
        "detail": "AttenEnv.Scripts.fixup_firestore_v1_keywords",
        "documentation": {}
    },
    {
        "label": "Tee",
        "kind": 6,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "class Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass\n        tee_f.write(what)",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "CopyTo",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def CopyTo(desc, src, dest):\n    import win32api\n    import win32con\n    while 1:\n        try:\n            win32api.CopyFile(src, dest, 0)\n            return\n        except win32api.error as details:\n            if details.winerror == 5:  # access denied - user not admin.\n                raise",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "LoadSystemModule",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def LoadSystemModule(lib_dir, modname):\n    # See if this is a debug build.\n    import importlib.machinery\n    import importlib.util\n    suffix = \"_d\" if \"_d.pyd\" in importlib.machinery.EXTENSION_SUFFIXES else \"\"\n    filename = \"%s%d%d%s.dll\" % (\n        modname,\n        sys.version_info[0],\n        sys.version_info[1],\n        suffix,",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "SetPyKeyVal",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def SetPyKeyVal(key_name, value_name, value):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.CreateKey(root_key, key_name)\n        try:\n            winreg.SetValueEx(my_key, value_name, 0, winreg.REG_SZ, value)\n            if verbose:\n                print(\"-> %s\\\\%s[%s]=%r\" % (root_key_name, key_name, value_name, value))\n        finally:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "UnsetPyKeyVal",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def UnsetPyKeyVal(key_name, value_name, delete_key=False):\n    root_hkey = get_root_hkey()\n    root_key = winreg.OpenKey(root_hkey, root_key_name)\n    try:\n        my_key = winreg.OpenKey(root_key, key_name, 0, winreg.KEY_SET_VALUE)\n        try:\n            winreg.DeleteValue(my_key, value_name)\n            if verbose:\n                print(\"-> DELETE %s\\\\%s[%s]\" % (root_key_name, key_name, value_name))\n        finally:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterCOMObjects",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterCOMObjects(register=True):\n    import win32com.server.register\n    if register:\n        func = win32com.server.register.RegisterClasses\n    else:\n        func = win32com.server.register.UnregisterClasses\n    flags = {}\n    if not verbose:\n        flags[\"quiet\"] = 1\n    for module, klass_name in com_modules:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterHelpFile",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterHelpFile(register=True, lib_dir=None):\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    if register:\n        # Register the .chm help file.\n        chm_file = os.path.join(lib_dir, \"PyWin32.chm\")\n        if os.path.isfile(chm_file):\n            # This isn't recursive, so if 'Help' doesn't exist, we croak\n            SetPyKeyVal(\"Help\", None, None)\n            SetPyKeyVal(\"Help\\\\Pythonwin Reference\", None, chm_file)",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "RegisterPythonwin",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def RegisterPythonwin(register=True, lib_dir=None):\n    \"\"\"Add (or remove) Pythonwin to context menu for python scripts.\n    ??? Should probably also add Edit command for pys files also.\n    Also need to remove these keys on uninstall, but there's no function\n        like file_created to add registry entries to uninstall log ???\n    \"\"\"\n    import os\n    if lib_dir is None:\n        lib_dir = sysconfig.get_paths()[\"platlib\"]\n    classes_root = get_root_hkey()",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_shortcuts_folder",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_shortcuts_folder():\n    if get_root_hkey() == winreg.HKEY_LOCAL_MACHINE:\n        try:\n            fldr = get_special_folder_path(\"CSIDL_COMMON_PROGRAMS\")\n        except OSError:\n            # No CSIDL_COMMON_PROGRAMS on this platform\n            fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")\n    else:\n        # non-admin install - always goes in this user's start menu.\n        fldr = get_special_folder_path(\"CSIDL_PROGRAMS\")",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "get_system_dir",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def get_system_dir():\n    import win32api  # we assume this exists.\n    try:\n        import pythoncom\n        import win32process\n        from win32com.shell import shell, shellcon\n        try:\n            if win32process.IsWow64Process():\n                return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEMX86)\n            return shell.SHGetSpecialFolderPath(0, shellcon.CSIDL_SYSTEM)",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "fixup_dbi",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def fixup_dbi():\n    # We used to have a dbi.pyd with our .pyd files, but now have a .py file.\n    # If the user didn't uninstall, they will find the .pyd which will cause\n    # problems - so handle that.\n    import win32api\n    import win32con\n    pyd_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi.pyd\")\n    pyd_d_name = os.path.join(os.path.dirname(win32api.__file__), \"dbi_d.pyd\")\n    py_name = os.path.join(os.path.dirname(win32con.__file__), \"dbi.py\")\n    for this_pyd in (pyd_name, pyd_d_name):",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "install",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def install(lib_dir):\n    import traceback\n    # The .pth file is now installed as a regular file.\n    # Create the .pth file in the site-packages dir, and use only relative paths\n    # We used to write a .pth directly to sys.prefix - clobber it.\n    if os.path.isfile(os.path.join(sys.prefix, \"pywin32.pth\")):\n        os.unlink(os.path.join(sys.prefix, \"pywin32.pth\"))\n    # The .pth may be new and therefore not loaded in this session.\n    # Setup the paths just in case.\n    for name in \"win32 win32\\\\lib Pythonwin\".split():",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def uninstall(lib_dir):\n    # First ensure our system modules are loaded from pywin32_system, so\n    # we can remove the ones we copied...\n    LoadSystemModule(lib_dir, \"pywintypes\")\n    LoadSystemModule(lib_dir, \"pythoncom\")\n    try:\n        RegisterCOMObjects(False)\n    except Exception as why:\n        print(\"Failed to unregister COM objects: %s\" % (why,))\n    try:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verify_destination",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def verify_destination(location):\n    if not os.path.isdir(location):\n        raise argparse.ArgumentTypeError('Path \"{}\" does not exist!'.format(location))\n    return location\ndef main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "def main():\n    import argparse\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.RawDescriptionHelpFormatter,\n        description=\"\"\"A post-install script for the pywin32 extensions.\n    * Typical usage:\n    > python pywin32_postinstall.py -install\n    If you installed pywin32 via a .exe installer, this should be run\n    automatically after installation, but if it fails you can run it again.\n    If you installed pywin32 via PIP, you almost certainly need to run this to",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "tee_f",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "tee_f = open(os.path.join(tempfile.gettempdir(), \"pywin32_postinstall.log\"), \"w\")\nclass Tee:\n    def __init__(self, file):\n        self.f = file\n    def write(self, what):\n        if self.f is not None:\n            try:\n                self.f.write(what.replace(\"\\n\", \"\\r\\n\"))\n            except IOError:\n                pass",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stderr",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stderr = Tee(sys.stderr)\nsys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "sys.stdout",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "sys.stdout = Tee(sys.stdout)\ncom_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "com_modules",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "com_modules = [\n    # module_name,                      class_names\n    (\"win32com.servers.interp\", \"Interpreter\"),\n    (\"win32com.servers.dictionary\", \"DictionaryPolicy\"),\n    (\"win32com.axscript.client.pyscript\", \"PyScript\"),\n]\n# Is this a 'silent' install - ie, avoid all dialogs.\n# Different than 'verbose'\nsilent = 0\n# Verbosity of output messages.",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "silent",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "silent = 0\n# Verbosity of output messages.\nverbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "verbose = 1\nroot_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "root_key_name",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_postinstall",
        "description": "AttenEnv.Scripts.pywin32_postinstall",
        "peekOfCode": "root_key_name = \"Software\\\\Python\\\\PythonCore\\\\\" + sys.winver\ntry:\n    # When this script is run from inside the bdist_wininst installer,\n    # file_created() and directory_created() are additional builtin\n    # functions which write lines to Python23\\pywin32-install.log. This is\n    # a list of actions for the uninstaller, the format is inspired by what\n    # the Wise installer also creates.\n    file_created\n    is_bdist_wininst = True\nexcept NameError:",
        "detail": "AttenEnv.Scripts.pywin32_postinstall",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "def run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()\n    result = subprocess.run(cmd, check=False, cwd=dirname)\n    print(\"*** Test script '%s' exited with %s\" % (script, result.returncode))\n    sys.stdout.flush()\n    if result.returncode:",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "find_and_run",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "def find_and_run(possible_locations, extras):\n    for maybe in possible_locations:\n        if os.path.isfile(maybe):\n            run_test(maybe, extras)\n            break\n    else:\n        raise RuntimeError(\n            \"Failed to locate a test script in one of %s\" % possible_locations\n        )\ndef main():",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "def main():\n    import argparse\n    code_directories = [this_dir] + site_packages\n    parser = argparse.ArgumentParser(\n        description=\"A script to trigger tests in all subprojects of PyWin32.\"\n    )\n    parser.add_argument(\n        \"-no-user-interaction\",\n        default=False,\n        action=\"store_true\",",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "this_dir",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "this_dir = os.path.dirname(__file__)\nsite_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "site_packages",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "site_packages = [\n    site.getusersitepackages(),\n] + site.getsitepackages()\nfailures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "failures",
        "kind": 5,
        "importPath": "AttenEnv.Scripts.pywin32_testall",
        "description": "AttenEnv.Scripts.pywin32_testall",
        "peekOfCode": "failures = []\n# Run a test using subprocess and wait for the result.\n# If we get an returncode != 0, we know that there was an error, but we don't\n# abort immediately - we run as many tests as we can.\ndef run_test(script, cmdline_extras):\n    dirname, scriptname = os.path.split(script)\n    # some tests prefer to be run from their directory.\n    cmd = [sys.executable, \"-u\", scriptname] + cmdline_extras\n    print(\"--- Running '%s' ---\" % script)\n    sys.stdout.flush()",
        "detail": "AttenEnv.Scripts.pywin32_testall",
        "documentation": {}
    },
    {
        "label": "me",
        "kind": 5,
        "importPath": "drone.test",
        "description": "drone.test",
        "peekOfCode": "me = tello.Tello()\nme.connect()\nme.streamon()\nimg = me.get_frame_read().frame\nprint(img)\ncv2.imshow(\"Tello\", img)\ntime.sleep(1)\nme.stream_off()\ntest = test - 1",
        "detail": "drone.test",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "drone.test",
        "description": "drone.test",
        "peekOfCode": "img = me.get_frame_read().frame\nprint(img)\ncv2.imshow(\"Tello\", img)\ntime.sleep(1)\nme.stream_off()\ntest = test - 1",
        "detail": "drone.test",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "drone.test",
        "description": "drone.test",
        "peekOfCode": "test = test - 1",
        "detail": "drone.test",
        "documentation": {}
    }
]